import libtbx.load_env
import sys
import os
from os import path

Import("env_etc")

env_etc.fast_linalg_dist = libtbx.env.dist_path("fast_linalg")
env_etc.fast_linalg_include = libtbx.env.under_dist("fast_linalg", "..")
env_etc.fast_linalg_common_includes = [
  env_etc.libtbx_include,
  env_etc.fast_linalg_include,
  env_etc.boost_include,
]

# It is assumed OpenBLAS was installed inside Python
# This is how conda installs it for example
openblas_dirs = [os.environ.get('OPENBLAS_DIR', None),
  path.join(sys.prefix),
  path.join(sys.prefix, 'Library')]

def enable_fast_linalg(env):
  if not libtbx.env.has_module('fast_linalg'):
    return

  test_code = """\
    #include <cblas.h>
    #include <lapacke.h>
    int threads() { return openblas_get_num_threads(); }
  """
  #avoid the same procedure to be called numerous times
  try:
    openblas_dir = libtbx.openblas_dir
    compilation_tested = True
  except:
    compilation_tested = False
    openblas_dir = None
    for ob_dir in openblas_dirs:
      if not ob_dir:
        continue
      if path.exists(path.join(ob_dir, 'include', 'cblas.h')):
        openblas_dir = ob_dir
        print("Located openblas at %s" %ob_dir)
        break
    libtbx.openblas_dir = openblas_dir
  if openblas_dir:
    env_etc.include_registry.append(
      env=env,
      paths=env_etc.fast_linalg_common_includes + [path.join(openblas_dir, 'include')])
    env.Append(LIBS=['openblas'], LIBPATH=path.join(openblas_dir, 'lib'))
  for flag in ("CCTBX_FAST_LINALG_USES_OPENBLAS",
               "CCTBX_HAS_CBLAS", "CCTBX_HAS_LAPACKE",
               "LAPACK_COMPLEX_STRUCTURE", "HAVE_LAPACK_CONFIG_H", "ADD_"):
    flag = "-D" + flag
    env.Append(CXXFLAGS=flag)
    env.Append(SHCXXFLAGS=flag)
  if not compilation_tested:
    conf = env.Configure()
    flag = conf.TryCompile(test_code, extension='.cpp')
    conf.Finish()
    assert flag, "OpenBLAS is not available but it is necessary for fast_linalg"

env_etc.enable_fast_linalg = enable_fast_linalg

Import("env_base")
envs = [env_base]
if not env_etc.no_boost_python:
  Import("env_no_includes_boost_python_ext")
  envs.append(env_no_includes_boost_python_ext)
fast_linalg_envs = []
for env, extra_inc in zip(envs, ([], [env_etc.python_include])):
  e = env.Clone()
  env_etc.enable_fast_linalg(e)
  env_etc.include_registry.append(env=e, paths=extra_inc)
  fast_linalg_envs.append(e)
env_fast_linalg_base = fast_linalg_envs[0]
Export("env_fast_linalg_base")
if not env_etc.no_boost_python:
  env_fast_linalg_boost_python_ext = fast_linalg_envs[1]
  Export("env_fast_linalg_boost_python_ext")

if not env_etc.no_boost_python:
  env = env_fast_linalg_boost_python_ext.Clone()
  env.SharedLibrary(target='#lib/fast_linalg_ext', source=['ext.cpp'])

SConscript("tests/SConscript")

