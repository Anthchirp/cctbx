from __future__ import absolute_import, division, print_function

import sys

NGLscriptstr = """

var ttipalpha = %s;
var camtype = %s;
var negativeradiistr

function timefunc() {
  var d = new Date();
  var now = d.getTime();
  return now
}

var timenow = timefunc();
var rightnow = timefunc();


window.addEventListener( 'resize',
  function( event ){
      stage.handleResize();
  },
  false
);


if (isdebug)
{
  var script=document.createElement('script');
  script.src='https://rawgit.com/paulirish/memory-stats.js/master/bookmarklet.js';
  document.head.appendChild(script);
}


// define tooltip element
var tooltip = document.createElement("div");
Object.assign(tooltip.style, {
  display: "none",
  position: "absolute",
  zIndex: 10,
  pointerEvents: "none",
  backgroundColor: "rgba(255, 255, 255, ttipalpha )",
  color: "black",
  padding: "0.1em",
  fontFamily: "sans-serif"
});


%s


function getOrientMsg()
{
  cvorientmx = stage.viewerControls.getOrientation();
  if (cvorientmx.determinant() == 0)
      return oldmsg; // don't return invalid matrix

  cvorient = cvorientmx.elements;
  for (j=0; j<16; j++)
  {
    if (Number.isNaN( cvorient[j]) )
      return oldmsg; // don't return invalid matrix
  }

  if (stage.viewer.cDist != 0
        && stage.viewer.parameters.clipFar > stage.viewer.cDist
        && stage.viewer.cDist > stage.viewer.parameters.clipNear)
    cameradist = stage.viewer.cDist;
  else if (stage.viewer.camera.position.z != 0
        && stage.viewer.parameters.clipFar > -stage.viewer.camera.position.z
        && -stage.viewer.camera.position.z > stage.viewer.parameters.clipNear)
    cameradist = -stage.viewer.camera.position.z;
  else
    cameradist = cvorient[14]; // fall back if stage.viewer.camera.position.z is corrupted
  cvorient.push( cameradist );
  msg = String(cvorient);
  oldmsg = msg;
  return msg;
}


  // listen to `hovered` signal to move tooltip around and change its text
PickingProxyfunc = function(pickingProxy)
{
  if (pickingProxy
        && (Object.prototype.toString.call(pickingProxy.picker["ids"]) === '[object Array]' )
        && displaytooltips )
  {
    var cp = pickingProxy.canvasPosition;
    var sym_id = -1;
    var hkl_id = -1;
    var ttipid = "";
    if (pickingProxy.picker["ids"].length > 0)
    { // get stored id number of symmetry operator applied to this hkl
      sym_id = pickingProxy.picker["ids"][0];
      var ids = pickingProxy.picker["ids"].slice(1);
      var is_friedel_mate = 0;
      hkl_id = ids[ pickingProxy.pid %% ids.length ];
      if (pickingProxy.pid >= ids.length)
        is_friedel_mate = 1;
    }
    // tell python the id of the hkl and id number of the symmetry operator
    rightnow = timefunc();
    if (rightnow - timenow > tdelay)
    { // only post every 50 milli second as not to overwhelm python
      ttipid = String([hkl_id, sym_id, is_friedel_mate]);
      WebsockSendMsg( 'tooltip_id: [' + ttipid + ']' );
      timenow = timefunc();
    }

    if (isdebug)
      console.log( "current_ttip_ids: " + String(current_ttip_ids) + ", ttipid: " + String(ttipid) );
    if (current_ttip !== "" && current_ttip_ids == ttipid )
    {
      tooltip.innerText = current_ttip;
      tooltip.style.bottom = cp.y + 7 + "px";
      tooltip.style.left = cp.x + 8 + "px";
      tooltip.style.fontSize = fontsize.toString() + "pt";
      tooltip.style.display = "block";
    }
  }
  else
  {
    tooltip.style.display = "none";
    current_ttip = "";
  }
};


function getTextWidth(text, fsize=8)
{
  // re-use canvas object for better performance
  var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
  var context = canvas.getContext("2d");
  context.font = fsize.toString() + "pt sans-serif";
  var metrics = context.measureText(text);
  return metrics.width;
}


// circular rainbow with fom attenuation
fomcolourgradvalarray = new Array(50);
fomcolourgradvalarray[0] = [[0.0, 255, 0, 0], ['null', 255, 25, 0], ['null', 255, 51, 0], ['null', 255, 76, 0], ['null', 255, 102, 0], ['null', 255, 127, 0], ['null', 255, 153, 0], ['null', 255, 178, 0], ['null', 255, 204, 0], ['null', 255, 229, 0], [60.0, 255, 255, 0], ['null', 229, 255, 0], ['null', 204, 255, 0], ['null', 178, 255, 0], ['null', 153, 255, 0], ['null', 127, 255, 0], ['null', 102, 255, 0], ['null', 76, 255, 0], ['null', 51, 255, 0], ['null', 25, 255, 0], [120.0, 0, 255, 0], ['null', 0, 255, 25], ['null', 0, 255, 51], ['null', 0, 255, 76], ['null', 0, 255, 102], ['null', 0, 255, 127], ['null', 0, 255, 153], ['null', 0, 255, 178], ['null', 0, 255, 204], ['null', 0, 255, 229], [180.0, 0, 255, 255], ['null', 0, 229, 255], ['null', 0, 204, 255], ['null', 0, 178, 255], ['null', 0, 153, 255], ['null', 0, 127, 255], ['null', 0, 102, 255], ['null', 0, 76, 255], ['null', 0, 51, 255], ['null', 0, 25, 255], [240.0, 0, 0, 255], ['null', 25, 0, 255], ['null', 51, 0, 255], ['null', 76, 0, 255], ['null', 102, 0, 255], ['null', 127, 0, 255], ['null', 153, 0, 255], ['null', 178, 0, 255], ['null', 204, 0, 255], ['null', 229, 0, 255], [300.0, 255, 0, 255], ['null', 255, 0, 229], ['null', 255, 0, 204], ['null', 255, 0, 178], ['null', 255, 0, 153], ['null', 255, 0, 127], ['null', 255, 0, 102], ['null', 255, 0, 76], ['null', 255, 0, 51], ['null', 255, 0, 25], [360.0, 255, 0, 0]];
fomcolourgradvalarray[1] = [[0.0, 252, 2, 2], ['null', 252, 27, 2], ['null', 252, 52, 2], ['null', 252, 77, 2], ['null', 252, 102, 2], ['null', 252, 127, 2], ['null', 252, 152, 2], ['null', 252, 177, 2], ['null', 252, 202, 2], ['null', 252, 227, 2], [60.0, 252, 252, 2], ['null', 227, 252, 2], ['null', 202, 252, 2], ['null', 177, 252, 2], ['null', 152, 252, 2], ['null', 127, 252, 2], ['null', 102, 252, 2], ['null', 77, 252, 2], ['null', 52, 252, 2], ['null', 27, 252, 2], [120.0, 2, 252, 2], ['null', 2, 252, 27], ['null', 2, 252, 52], ['null', 2, 252, 77], ['null', 2, 252, 102], ['null', 2, 252, 127], ['null', 2, 252, 152], ['null', 2, 252, 177], ['null', 2, 252, 202], ['null', 2, 252, 227], [180.0, 2, 252, 252], ['null', 2, 227, 252], ['null', 2, 202, 252], ['null', 2, 177, 252], ['null', 2, 152, 252], ['null', 2, 127, 252], ['null', 2, 102, 252], ['null', 2, 77, 252], ['null', 2, 52, 252], ['null', 2, 27, 252], [240.0, 2, 2, 252], ['null', 27, 2, 252], ['null', 52, 2, 252], ['null', 77, 2, 252], ['null', 102, 2, 252], ['null', 127, 2, 252], ['null', 152, 2, 252], ['null', 177, 2, 252], ['null', 202, 2, 252], ['null', 227, 2, 252], [300.0, 252, 2, 252], ['null', 252, 2, 227], ['null', 252, 2, 202], ['null', 252, 2, 177], ['null', 252, 2, 152], ['null', 252, 2, 127], ['null', 252, 2, 102], ['null', 252, 2, 77], ['null', 252, 2, 52], ['null', 252, 2, 27], [360.0, 252, 2, 2]];
fomcolourgradvalarray[2] = [[0.0, 249, 5, 5], ['null', 249, 29, 5], ['null', 249, 54, 5], ['null', 249, 78, 5], ['null', 249, 103, 5], ['null', 249, 127, 5], ['null', 249, 151, 5], ['null', 249, 176, 5], ['null', 249, 200, 5], ['null', 249, 225, 5], [60.0, 249, 249, 5], ['null', 225, 249, 5], ['null', 200, 249, 5], ['null', 176, 249, 5], ['null', 151, 249, 5], ['null', 127, 249, 5], ['null', 103, 249, 5], ['null', 78, 249, 5], ['null', 54, 249, 5], ['null', 29, 249, 5], [120.0, 5, 249, 5], ['null', 5, 249, 29], ['null', 5, 249, 54], ['null', 5, 249, 78], ['null', 5, 249, 103], ['null', 5, 249, 127], ['null', 5, 249, 151], ['null', 5, 249, 176], ['null', 5, 249, 200], ['null', 5, 249, 225], [180.0, 5, 249, 249], ['null', 5, 225, 249], ['null', 5, 200, 249], ['null', 5, 176, 249], ['null', 5, 151, 249], ['null', 5, 127, 249], ['null', 5, 103, 249], ['null', 5, 78, 249], ['null', 5, 54, 249], ['null', 5, 29, 249], [240.0, 5, 5, 249], ['null', 29, 5, 249], ['null', 54, 5, 249], ['null', 78, 5, 249], ['null', 103, 5, 249], ['null', 127, 5, 249], ['null', 151, 5, 249], ['null', 176, 5, 249], ['null', 200, 5, 249], ['null', 225, 5, 249], [300.0, 249, 5, 249], ['null', 249, 5, 225], ['null', 249, 5, 200], ['null', 249, 5, 176], ['null', 249, 5, 151], ['null', 249, 5, 127], ['null', 249, 5, 103], ['null', 249, 5, 78], ['null', 249, 5, 54], ['null', 249, 5, 29], [360.0, 249, 5, 5]];
fomcolourgradvalarray[3] = [[0.0, 247, 7, 7], ['null', 247, 31, 7], ['null', 247, 55, 7], ['null', 247, 79, 7], ['null', 247, 103, 7], ['null', 247, 127, 7], ['null', 247, 151, 7], ['null', 247, 175, 7], ['null', 247, 199, 7], ['null', 247, 223, 7], [60.0, 247, 247, 7], ['null', 223, 247, 7], ['null', 199, 247, 7], ['null', 175, 247, 7], ['null', 151, 247, 7], ['null', 127, 247, 7], ['null', 103, 247, 7], ['null', 79, 247, 7], ['null', 55, 247, 7], ['null', 31, 247, 7], [120.0, 7, 247, 7], ['null', 7, 247, 31], ['null', 7, 247, 55], ['null', 7, 247, 79], ['null', 7, 247, 103], ['null', 7, 247, 127], ['null', 7, 247, 151], ['null', 7, 247, 175], ['null', 7, 247, 199], ['null', 7, 247, 223], [180.0, 7, 247, 247], ['null', 7, 223, 247], ['null', 7, 199, 247], ['null', 7, 175, 247], ['null', 7, 151, 247], ['null', 7, 127, 247], ['null', 7, 103, 247], ['null', 7, 79, 247], ['null', 7, 55, 247], ['null', 7, 31, 247], [240.0, 7, 7, 247], ['null', 31, 7, 247], ['null', 55, 7, 247], ['null', 79, 7, 247], ['null', 103, 7, 247], ['null', 127, 7, 247], ['null', 151, 7, 247], ['null', 175, 7, 247], ['null', 199, 7, 247], ['null', 223, 7, 247], [300.0, 247, 7, 247], ['null', 247, 7, 223], ['null', 247, 7, 199], ['null', 247, 7, 175], ['null', 247, 7, 151], ['null', 247, 7, 127], ['null', 247, 7, 103], ['null', 247, 7, 79], ['null', 247, 7, 55], ['null', 247, 7, 31], [360.0, 247, 7, 7]];
fomcolourgradvalarray[4] = [[0.0, 244, 10, 10], ['null', 244, 33, 10], ['null', 244, 57, 10], ['null', 244, 80, 10], ['null', 244, 104, 10], ['null', 244, 127, 10], ['null', 244, 150, 10], ['null', 244, 174, 10], ['null', 244, 197, 10], ['null', 244, 221, 10], [60.0, 244, 244, 10], ['null', 221, 244, 10], ['null', 197, 244, 10], ['null', 174, 244, 10], ['null', 150, 244, 10], ['null', 127, 244, 10], ['null', 104, 244, 10], ['null', 80, 244, 10], ['null', 57, 244, 10], ['null', 33, 244, 10], [120.0, 10, 244, 10], ['null', 10, 244, 33], ['null', 10, 244, 57], ['null', 10, 244, 80], ['null', 10, 244, 104], ['null', 10, 244, 127], ['null', 10, 244, 150], ['null', 10, 244, 174], ['null', 10, 244, 197], ['null', 10, 244, 221], [180.0, 10, 244, 244], ['null', 10, 221, 244], ['null', 10, 197, 244], ['null', 10, 174, 244], ['null', 10, 150, 244], ['null', 10, 127, 244], ['null', 10, 104, 244], ['null', 10, 80, 244], ['null', 10, 57, 244], ['null', 10, 33, 244], [240.0, 10, 10, 244], ['null', 33, 10, 244], ['null', 57, 10, 244], ['null', 80, 10, 244], ['null', 104, 10, 244], ['null', 127, 10, 244], ['null', 150, 10, 244], ['null', 174, 10, 244], ['null', 197, 10, 244], ['null', 221, 10, 244], [300.0, 244, 10, 244], ['null', 244, 10, 221], ['null', 244, 10, 197], ['null', 244, 10, 174], ['null', 244, 10, 150], ['null', 244, 10, 127], ['null', 244, 10, 104], ['null', 244, 10, 80], ['null', 244, 10, 57], ['null', 244, 10, 33], [360.0, 244, 10, 10]];
fomcolourgradvalarray[5] = [[0.0, 241, 13, 13], ['null', 241, 35, 13], ['null', 241, 58, 13], ['null', 241, 81, 13], ['null', 241, 104, 13], ['null', 241, 127, 13], ['null', 241, 150, 13], ['null', 241, 173, 13], ['null', 241, 196, 13], ['null', 241, 219, 13], [60.0, 241, 241, 13], ['null', 219, 241, 13], ['null', 196, 241, 13], ['null', 173, 241, 13], ['null', 150, 241, 13], ['null', 127, 241, 13], ['null', 104, 241, 13], ['null', 81, 241, 13], ['null', 58, 241, 13], ['null', 35, 241, 13], [120.0, 13, 241, 13], ['null', 13, 241, 35], ['null', 13, 241, 58], ['null', 13, 241, 81], ['null', 13, 241, 104], ['null', 13, 241, 127], ['null', 13, 241, 150], ['null', 13, 241, 173], ['null', 13, 241, 196], ['null', 13, 241, 219], [180.0, 13, 241, 241], ['null', 13, 219, 241], ['null', 13, 196, 241], ['null', 13, 173, 241], ['null', 13, 150, 241], ['null', 13, 127, 241], ['null', 13, 104, 241], ['null', 13, 81, 241], ['null', 13, 58, 241], ['null', 13, 35, 241], [240.0, 13, 13, 241], ['null', 35, 13, 241], ['null', 58, 13, 241], ['null', 81, 13, 241], ['null', 104, 13, 241], ['null', 127, 13, 241], ['null', 150, 13, 241], ['null', 173, 13, 241], ['null', 196, 13, 241], ['null', 219, 13, 241], [300.0, 241, 13, 241], ['null', 241, 13, 219], ['null', 241, 13, 196], ['null', 241, 13, 173], ['null', 241, 13, 150], ['null', 241, 13, 127], ['null', 241, 13, 104], ['null', 241, 13, 81], ['null', 241, 13, 58], ['null', 241, 13, 35], [360.0, 241, 13, 13]];
fomcolourgradvalarray[6] = [[0.0, 239, 15, 15], ['null', 239, 37, 15], ['null', 239, 60, 15], ['null', 239, 82, 15], ['null', 239, 105, 15], ['null', 239, 127, 15], ['null', 239, 149, 15], ['null', 239, 172, 15], ['null', 239, 194, 15], ['null', 239, 217, 15], [60.0, 239, 239, 15], ['null', 217, 239, 15], ['null', 194, 239, 15], ['null', 172, 239, 15], ['null', 149, 239, 15], ['null', 127, 239, 15], ['null', 105, 239, 15], ['null', 82, 239, 15], ['null', 60, 239, 15], ['null', 37, 239, 15], [120.0, 15, 239, 15], ['null', 15, 239, 37], ['null', 15, 239, 60], ['null', 15, 239, 82], ['null', 15, 239, 105], ['null', 15, 239, 127], ['null', 15, 239, 149], ['null', 15, 239, 172], ['null', 15, 239, 194], ['null', 15, 239, 217], [180.0, 15, 239, 239], ['null', 15, 217, 239], ['null', 15, 194, 239], ['null', 15, 172, 239], ['null', 15, 149, 239], ['null', 15, 127, 239], ['null', 15, 105, 239], ['null', 15, 82, 239], ['null', 15, 60, 239], ['null', 15, 37, 239], [240.0, 15, 15, 239], ['null', 37, 15, 239], ['null', 60, 15, 239], ['null', 82, 15, 239], ['null', 105, 15, 239], ['null', 127, 15, 239], ['null', 149, 15, 239], ['null', 172, 15, 239], ['null', 194, 15, 239], ['null', 217, 15, 239], [300.0, 239, 15, 239], ['null', 239, 15, 217], ['null', 239, 15, 194], ['null', 239, 15, 172], ['null', 239, 15, 149], ['null', 239, 15, 127], ['null', 239, 15, 105], ['null', 239, 15, 82], ['null', 239, 15, 60], ['null', 239, 15, 37], [360.0, 239, 15, 15]];
fomcolourgradvalarray[7] = [[0.0, 236, 18, 18], ['null', 236, 40, 18], ['null', 236, 61, 18], ['null', 236, 83, 18], ['null', 236, 105, 18], ['null', 236, 127, 18], ['null', 236, 149, 18], ['null', 236, 171, 18], ['null', 236, 193, 18], ['null', 236, 214, 18], [60.0, 236, 236, 18], ['null', 214, 236, 18], ['null', 193, 236, 18], ['null', 171, 236, 18], ['null', 149, 236, 18], ['null', 127, 236, 18], ['null', 105, 236, 18], ['null', 83, 236, 18], ['null', 61, 236, 18], ['null', 40, 236, 18], [120.0, 18, 236, 18], ['null', 18, 236, 40], ['null', 18, 236, 61], ['null', 18, 236, 83], ['null', 18, 236, 105], ['null', 18, 236, 127], ['null', 18, 236, 149], ['null', 18, 236, 171], ['null', 18, 236, 193], ['null', 18, 236, 214], [180.0, 18, 236, 236], ['null', 18, 214, 236], ['null', 18, 193, 236], ['null', 18, 171, 236], ['null', 18, 149, 236], ['null', 18, 127, 236], ['null', 18, 105, 236], ['null', 18, 83, 236], ['null', 18, 61, 236], ['null', 18, 40, 236], [240.0, 18, 18, 236], ['null', 40, 18, 236], ['null', 61, 18, 236], ['null', 83, 18, 236], ['null', 105, 18, 236], ['null', 127, 18, 236], ['null', 149, 18, 236], ['null', 171, 18, 236], ['null', 193, 18, 236], ['null', 214, 18, 236], [300.0, 236, 18, 236], ['null', 236, 18, 214], ['null', 236, 18, 193], ['null', 236, 18, 171], ['null', 236, 18, 149], ['null', 236, 18, 127], ['null', 236, 18, 105], ['null', 236, 18, 83], ['null', 236, 18, 61], ['null', 236, 18, 40], [360.0, 236, 18, 18]];
fomcolourgradvalarray[8] = [[0.0, 234, 20, 20], ['null', 234, 42, 20], ['null', 234, 63, 20], ['null', 234, 84, 20], ['null', 234, 106, 20], ['null', 234, 127, 20], ['null', 234, 148, 20], ['null', 234, 170, 20], ['null', 234, 191, 20], ['null', 234, 212, 20], [60.0, 234, 234, 20], ['null', 212, 234, 20], ['null', 191, 234, 20], ['null', 170, 234, 20], ['null', 148, 234, 20], ['null', 127, 234, 20], ['null', 106, 234, 20], ['null', 84, 234, 20], ['null', 63, 234, 20], ['null', 42, 234, 20], [120.0, 20, 234, 20], ['null', 20, 234, 42], ['null', 20, 234, 63], ['null', 20, 234, 84], ['null', 20, 234, 106], ['null', 20, 234, 127], ['null', 20, 234, 148], ['null', 20, 234, 170], ['null', 20, 234, 191], ['null', 20, 234, 212], [180.0, 20, 234, 234], ['null', 20, 212, 234], ['null', 20, 191, 234], ['null', 20, 170, 234], ['null', 20, 148, 234], ['null', 20, 127, 234], ['null', 20, 106, 234], ['null', 20, 84, 234], ['null', 20, 63, 234], ['null', 20, 42, 234], [240.0, 20, 20, 234], ['null', 42, 20, 234], ['null', 63, 20, 234], ['null', 84, 20, 234], ['null', 106, 20, 234], ['null', 127, 20, 234], ['null', 148, 20, 234], ['null', 170, 20, 234], ['null', 191, 20, 234], ['null', 212, 20, 234], [300.0, 234, 20, 234], ['null', 234, 20, 212], ['null', 234, 20, 191], ['null', 234, 20, 170], ['null', 234, 20, 148], ['null', 234, 20, 127], ['null', 234, 20, 106], ['null', 234, 20, 84], ['null', 234, 20, 63], ['null', 234, 20, 42], [360.0, 234, 20, 20]];
fomcolourgradvalarray[9] = [[0.0, 231, 23, 23], ['null', 231, 44, 23], ['null', 231, 65, 23], ['null', 231, 85, 23], ['null', 231, 106, 23], ['null', 231, 127, 23], ['null', 231, 148, 23], ['null', 231, 169, 23], ['null', 231, 189, 23], ['null', 231, 210, 23], [60.0, 231, 231, 23], ['null', 210, 231, 23], ['null', 189, 231, 23], ['null', 169, 231, 23], ['null', 148, 231, 23], ['null', 127, 231, 23], ['null', 106, 231, 23], ['null', 85, 231, 23], ['null', 65, 231, 23], ['null', 44, 231, 23], [120.0, 23, 231, 23], ['null', 23, 231, 44], ['null', 23, 231, 65], ['null', 23, 231, 85], ['null', 23, 231, 106], ['null', 23, 231, 127], ['null', 23, 231, 148], ['null', 23, 231, 169], ['null', 23, 231, 189], ['null', 23, 231, 210], [180.0, 23, 231, 231], ['null', 23, 210, 231], ['null', 23, 189, 231], ['null', 23, 169, 231], ['null', 23, 148, 231], ['null', 23, 127, 231], ['null', 23, 106, 231], ['null', 23, 85, 231], ['null', 23, 65, 231], ['null', 23, 44, 231], [240.0, 23, 23, 231], ['null', 44, 23, 231], ['null', 65, 23, 231], ['null', 85, 23, 231], ['null', 106, 23, 231], ['null', 127, 23, 231], ['null', 148, 23, 231], ['null', 169, 23, 231], ['null', 189, 23, 231], ['null', 210, 23, 231], [300.0, 231, 23, 231], ['null', 231, 23, 210], ['null', 231, 23, 189], ['null', 231, 23, 169], ['null', 231, 23, 148], ['null', 231, 23, 127], ['null', 231, 23, 106], ['null', 231, 23, 85], ['null', 231, 23, 65], ['null', 231, 23, 44], [360.0, 231, 23, 23]];
fomcolourgradvalarray[10] = [[0.0, 228, 26, 26], ['null', 228, 46, 26], ['null', 228, 66, 26], ['null', 228, 86, 26], ['null', 228, 107, 26], ['null', 228, 127, 26], ['null', 228, 147, 26], ['null', 228, 168, 26], ['null', 228, 188, 26], ['null', 228, 208, 26], [60.0, 228, 228, 26], ['null', 208, 228, 26], ['null', 188, 228, 26], ['null', 168, 228, 26], ['null', 147, 228, 26], ['null', 127, 228, 26], ['null', 107, 228, 26], ['null', 86, 228, 26], ['null', 66, 228, 26], ['null', 46, 228, 26], [120.0, 26, 228, 26], ['null', 26, 228, 46], ['null', 26, 228, 66], ['null', 26, 228, 86], ['null', 26, 228, 107], ['null', 26, 228, 127], ['null', 26, 228, 147], ['null', 26, 228, 168], ['null', 26, 228, 188], ['null', 26, 228, 208], [180.0, 26, 228, 228], ['null', 26, 208, 228], ['null', 26, 188, 228], ['null', 26, 168, 228], ['null', 26, 147, 228], ['null', 26, 127, 228], ['null', 26, 107, 228], ['null', 26, 86, 228], ['null', 26, 66, 228], ['null', 26, 46, 228], [240.0, 26, 26, 228], ['null', 46, 26, 228], ['null', 66, 26, 228], ['null', 86, 26, 228], ['null', 107, 26, 228], ['null', 127, 26, 228], ['null', 147, 26, 228], ['null', 168, 26, 228], ['null', 188, 26, 228], ['null', 208, 26, 228], [300.0, 228, 26, 228], ['null', 228, 26, 208], ['null', 228, 26, 188], ['null', 228, 26, 168], ['null', 228, 26, 147], ['null', 228, 26, 127], ['null', 228, 26, 107], ['null', 228, 26, 86], ['null', 228, 26, 66], ['null', 228, 26, 46], [360.0, 228, 26, 26]];
fomcolourgradvalarray[11] = [[0.0, 226, 28, 28], ['null', 226, 48, 28], ['null', 226, 68, 28], ['null', 226, 87, 28], ['null', 226, 107, 28], ['null', 226, 127, 28], ['null', 226, 147, 28], ['null', 226, 167, 28], ['null', 226, 186, 28], ['null', 226, 206, 28], [60.0, 226, 226, 28], ['null', 206, 226, 28], ['null', 186, 226, 28], ['null', 167, 226, 28], ['null', 147, 226, 28], ['null', 127, 226, 28], ['null', 107, 226, 28], ['null', 87, 226, 28], ['null', 68, 226, 28], ['null', 48, 226, 28], [120.0, 28, 226, 28], ['null', 28, 226, 48], ['null', 28, 226, 68], ['null', 28, 226, 87], ['null', 28, 226, 107], ['null', 28, 226, 127], ['null', 28, 226, 147], ['null', 28, 226, 167], ['null', 28, 226, 186], ['null', 28, 226, 206], [180.0, 28, 226, 226], ['null', 28, 206, 226], ['null', 28, 186, 226], ['null', 28, 167, 226], ['null', 28, 147, 226], ['null', 28, 127, 226], ['null', 28, 107, 226], ['null', 28, 87, 226], ['null', 28, 68, 226], ['null', 28, 48, 226], [240.0, 28, 28, 226], ['null', 48, 28, 226], ['null', 68, 28, 226], ['null', 87, 28, 226], ['null', 107, 28, 226], ['null', 127, 28, 226], ['null', 147, 28, 226], ['null', 167, 28, 226], ['null', 186, 28, 226], ['null', 206, 28, 226], [300.0, 226, 28, 226], ['null', 226, 28, 206], ['null', 226, 28, 186], ['null', 226, 28, 167], ['null', 226, 28, 147], ['null', 226, 28, 127], ['null', 226, 28, 107], ['null', 226, 28, 87], ['null', 226, 28, 68], ['null', 226, 28, 48], [360.0, 226, 28, 28]];
fomcolourgradvalarray[12] = [[0.0, 223, 31, 31], ['null', 223, 50, 31], ['null', 223, 69, 31], ['null', 223, 88, 31], ['null', 223, 108, 31], ['null', 223, 127, 31], ['null', 223, 146, 31], ['null', 223, 166, 31], ['null', 223, 185, 31], ['null', 223, 204, 31], [60.0, 223, 223, 31], ['null', 204, 223, 31], ['null', 185, 223, 31], ['null', 166, 223, 31], ['null', 146, 223, 31], ['null', 127, 223, 31], ['null', 108, 223, 31], ['null', 88, 223, 31], ['null', 69, 223, 31], ['null', 50, 223, 31], [120.0, 31, 223, 31], ['null', 31, 223, 50], ['null', 31, 223, 69], ['null', 31, 223, 88], ['null', 31, 223, 108], ['null', 31, 223, 127], ['null', 31, 223, 146], ['null', 31, 223, 166], ['null', 31, 223, 185], ['null', 31, 223, 204], [180.0, 31, 223, 223], ['null', 31, 204, 223], ['null', 31, 185, 223], ['null', 31, 166, 223], ['null', 31, 146, 223], ['null', 31, 127, 223], ['null', 31, 108, 223], ['null', 31, 88, 223], ['null', 31, 69, 223], ['null', 31, 50, 223], [240.0, 31, 31, 223], ['null', 50, 31, 223], ['null', 69, 31, 223], ['null', 88, 31, 223], ['null', 108, 31, 223], ['null', 127, 31, 223], ['null', 146, 31, 223], ['null', 166, 31, 223], ['null', 185, 31, 223], ['null', 204, 31, 223], [300.0, 223, 31, 223], ['null', 223, 31, 204], ['null', 223, 31, 185], ['null', 223, 31, 166], ['null', 223, 31, 146], ['null', 223, 31, 127], ['null', 223, 31, 108], ['null', 223, 31, 88], ['null', 223, 31, 69], ['null', 223, 31, 50], [360.0, 223, 31, 31]];
fomcolourgradvalarray[13] = [[0.0, 221, 33, 33], ['null', 221, 52, 33], ['null', 221, 71, 33], ['null', 221, 90, 33], ['null', 221, 108, 33], ['null', 221, 127, 33], ['null', 221, 146, 33], ['null', 221, 164, 33], ['null', 221, 183, 33], ['null', 221, 202, 33], [60.0, 221, 221, 33], ['null', 202, 221, 33], ['null', 183, 221, 33], ['null', 164, 221, 33], ['null', 146, 221, 33], ['null', 127, 221, 33], ['null', 108, 221, 33], ['null', 90, 221, 33], ['null', 71, 221, 33], ['null', 52, 221, 33], [120.0, 33, 221, 33], ['null', 33, 221, 52], ['null', 33, 221, 71], ['null', 33, 221, 90], ['null', 33, 221, 108], ['null', 33, 221, 127], ['null', 33, 221, 146], ['null', 33, 221, 164], ['null', 33, 221, 183], ['null', 33, 221, 202], [180.0, 33, 221, 221], ['null', 33, 202, 221], ['null', 33, 183, 221], ['null', 33, 164, 221], ['null', 33, 146, 221], ['null', 33, 127, 221], ['null', 33, 108, 221], ['null', 33, 90, 221], ['null', 33, 71, 221], ['null', 33, 52, 221], [240.0, 33, 33, 221], ['null', 52, 33, 221], ['null', 71, 33, 221], ['null', 90, 33, 221], ['null', 108, 33, 221], ['null', 127, 33, 221], ['null', 146, 33, 221], ['null', 164, 33, 221], ['null', 183, 33, 221], ['null', 202, 33, 221], [300.0, 221, 33, 221], ['null', 221, 33, 202], ['null', 221, 33, 183], ['null', 221, 33, 164], ['null', 221, 33, 146], ['null', 221, 33, 127], ['null', 221, 33, 108], ['null', 221, 33, 90], ['null', 221, 33, 71], ['null', 221, 33, 52], [360.0, 221, 33, 33]];
fomcolourgradvalarray[14] = [[0.0, 218, 36, 36], ['null', 218, 54, 36], ['null', 218, 72, 36], ['null', 218, 91, 36], ['null', 218, 109, 36], ['null', 218, 127, 36], ['null', 218, 145, 36], ['null', 218, 163, 36], ['null', 218, 182, 36], ['null', 218, 200, 36], [60.0, 218, 218, 36], ['null', 200, 218, 36], ['null', 182, 218, 36], ['null', 163, 218, 36], ['null', 145, 218, 36], ['null', 127, 218, 36], ['null', 109, 218, 36], ['null', 91, 218, 36], ['null', 72, 218, 36], ['null', 54, 218, 36], [120.0, 36, 218, 36], ['null', 36, 218, 54], ['null', 36, 218, 72], ['null', 36, 218, 91], ['null', 36, 218, 109], ['null', 36, 218, 127], ['null', 36, 218, 145], ['null', 36, 218, 163], ['null', 36, 218, 182], ['null', 36, 218, 200], [180.0, 36, 218, 218], ['null', 36, 200, 218], ['null', 36, 182, 218], ['null', 36, 163, 218], ['null', 36, 145, 218], ['null', 36, 127, 218], ['null', 36, 109, 218], ['null', 36, 91, 218], ['null', 36, 72, 218], ['null', 36, 54, 218], [240.0, 36, 36, 218], ['null', 54, 36, 218], ['null', 72, 36, 218], ['null', 91, 36, 218], ['null', 109, 36, 218], ['null', 127, 36, 218], ['null', 145, 36, 218], ['null', 163, 36, 218], ['null', 182, 36, 218], ['null', 200, 36, 218], [300.0, 218, 36, 218], ['null', 218, 36, 200], ['null', 218, 36, 182], ['null', 218, 36, 163], ['null', 218, 36, 145], ['null', 218, 36, 127], ['null', 218, 36, 109], ['null', 218, 36, 91], ['null', 218, 36, 72], ['null', 218, 36, 54], [360.0, 218, 36, 36]];
fomcolourgradvalarray[15] = [[0.0, 215, 39, 39], ['null', 215, 56, 39], ['null', 215, 74, 39], ['null', 215, 92, 39], ['null', 215, 109, 39], ['null', 215, 127, 39], ['null', 215, 145, 39], ['null', 215, 162, 39], ['null', 215, 180, 39], ['null', 215, 198, 39], [60.0, 215, 215, 39], ['null', 198, 215, 39], ['null', 180, 215, 39], ['null', 162, 215, 39], ['null', 145, 215, 39], ['null', 127, 215, 39], ['null', 109, 215, 39], ['null', 92, 215, 39], ['null', 74, 215, 39], ['null', 56, 215, 39], [120.0, 39, 215, 39], ['null', 39, 215, 56], ['null', 39, 215, 74], ['null', 39, 215, 92], ['null', 39, 215, 109], ['null', 39, 215, 127], ['null', 39, 215, 145], ['null', 39, 215, 162], ['null', 39, 215, 180], ['null', 39, 215, 198], [180.0, 39, 215, 215], ['null', 39, 198, 215], ['null', 39, 180, 215], ['null', 39, 162, 215], ['null', 39, 145, 215], ['null', 39, 127, 215], ['null', 39, 109, 215], ['null', 39, 92, 215], ['null', 39, 74, 215], ['null', 39, 56, 215], [240.0, 39, 39, 215], ['null', 56, 39, 215], ['null', 74, 39, 215], ['null', 92, 39, 215], ['null', 109, 39, 215], ['null', 127, 39, 215], ['null', 145, 39, 215], ['null', 162, 39, 215], ['null', 180, 39, 215], ['null', 198, 39, 215], [300.0, 215, 39, 215], ['null', 215, 39, 198], ['null', 215, 39, 180], ['null', 215, 39, 162], ['null', 215, 39, 145], ['null', 215, 39, 127], ['null', 215, 39, 109], ['null', 215, 39, 92], ['null', 215, 39, 74], ['null', 215, 39, 56], [360.0, 215, 39, 39]];
fomcolourgradvalarray[16] = [[0.0, 213, 41, 41], ['null', 213, 58, 41], ['null', 213, 75, 41], ['null', 213, 93, 41], ['null', 213, 110, 41], ['null', 213, 127, 41], ['null', 213, 144, 41], ['null', 213, 161, 41], ['null', 213, 179, 41], ['null', 213, 196, 41], [60.0, 213, 213, 41], ['null', 196, 213, 41], ['null', 179, 213, 41], ['null', 161, 213, 41], ['null', 144, 213, 41], ['null', 127, 213, 41], ['null', 110, 213, 41], ['null', 93, 213, 41], ['null', 75, 213, 41], ['null', 58, 213, 41], [120.0, 41, 213, 41], ['null', 41, 213, 58], ['null', 41, 213, 75], ['null', 41, 213, 93], ['null', 41, 213, 110], ['null', 41, 213, 127], ['null', 41, 213, 144], ['null', 41, 213, 161], ['null', 41, 213, 179], ['null', 41, 213, 196], [180.0, 41, 213, 213], ['null', 41, 196, 213], ['null', 41, 179, 213], ['null', 41, 161, 213], ['null', 41, 144, 213], ['null', 41, 127, 213], ['null', 41, 110, 213], ['null', 41, 93, 213], ['null', 41, 75, 213], ['null', 41, 58, 213], [240.0, 41, 41, 213], ['null', 58, 41, 213], ['null', 75, 41, 213], ['null', 93, 41, 213], ['null', 110, 41, 213], ['null', 127, 41, 213], ['null', 144, 41, 213], ['null', 161, 41, 213], ['null', 179, 41, 213], ['null', 196, 41, 213], [300.0, 213, 41, 213], ['null', 213, 41, 196], ['null', 213, 41, 179], ['null', 213, 41, 161], ['null', 213, 41, 144], ['null', 213, 41, 127], ['null', 213, 41, 110], ['null', 213, 41, 93], ['null', 213, 41, 75], ['null', 213, 41, 58], [360.0, 213, 41, 41]];
fomcolourgradvalarray[17] = [[0.0, 210, 44, 44], ['null', 210, 60, 44], ['null', 210, 77, 44], ['null', 210, 94, 44], ['null', 210, 110, 44], ['null', 210, 127, 44], ['null', 210, 144, 44], ['null', 210, 160, 44], ['null', 210, 177, 44], ['null', 210, 194, 44], [60.0, 210, 210, 44], ['null', 194, 210, 44], ['null', 177, 210, 44], ['null', 160, 210, 44], ['null', 144, 210, 44], ['null', 127, 210, 44], ['null', 110, 210, 44], ['null', 94, 210, 44], ['null', 77, 210, 44], ['null', 60, 210, 44], [120.0, 44, 210, 44], ['null', 44, 210, 60], ['null', 44, 210, 77], ['null', 44, 210, 94], ['null', 44, 210, 110], ['null', 44, 210, 127], ['null', 44, 210, 144], ['null', 44, 210, 160], ['null', 44, 210, 177], ['null', 44, 210, 194], [180.0, 44, 210, 210], ['null', 44, 194, 210], ['null', 44, 177, 210], ['null', 44, 160, 210], ['null', 44, 144, 210], ['null', 44, 127, 210], ['null', 44, 110, 210], ['null', 44, 94, 210], ['null', 44, 77, 210], ['null', 44, 60, 210], [240.0, 44, 44, 210], ['null', 60, 44, 210], ['null', 77, 44, 210], ['null', 94, 44, 210], ['null', 110, 44, 210], ['null', 127, 44, 210], ['null', 144, 44, 210], ['null', 160, 44, 210], ['null', 177, 44, 210], ['null', 194, 44, 210], [300.0, 210, 44, 210], ['null', 210, 44, 194], ['null', 210, 44, 177], ['null', 210, 44, 160], ['null', 210, 44, 144], ['null', 210, 44, 127], ['null', 210, 44, 110], ['null', 210, 44, 94], ['null', 210, 44, 77], ['null', 210, 44, 60], [360.0, 210, 44, 44]];
fomcolourgradvalarray[18] = [[0.0, 208, 46, 46], ['null', 208, 62, 46], ['null', 208, 79, 46], ['null', 208, 95, 46], ['null', 208, 111, 46], ['null', 208, 127, 46], ['null', 208, 143, 46], ['null', 208, 159, 46], ['null', 208, 175, 46], ['null', 208, 192, 46], [60.0, 208, 208, 46], ['null', 192, 208, 46], ['null', 175, 208, 46], ['null', 159, 208, 46], ['null', 143, 208, 46], ['null', 127, 208, 46], ['null', 111, 208, 46], ['null', 95, 208, 46], ['null', 79, 208, 46], ['null', 62, 208, 46], [120.0, 46, 208, 46], ['null', 46, 208, 62], ['null', 46, 208, 79], ['null', 46, 208, 95], ['null', 46, 208, 111], ['null', 46, 208, 127], ['null', 46, 208, 143], ['null', 46, 208, 159], ['null', 46, 208, 175], ['null', 46, 208, 192], [180.0, 46, 208, 208], ['null', 46, 192, 208], ['null', 46, 175, 208], ['null', 46, 159, 208], ['null', 46, 143, 208], ['null', 46, 127, 208], ['null', 46, 111, 208], ['null', 46, 95, 208], ['null', 46, 79, 208], ['null', 46, 62, 208], [240.0, 46, 46, 208], ['null', 62, 46, 208], ['null', 79, 46, 208], ['null', 95, 46, 208], ['null', 111, 46, 208], ['null', 127, 46, 208], ['null', 143, 46, 208], ['null', 159, 46, 208], ['null', 175, 46, 208], ['null', 192, 46, 208], [300.0, 208, 46, 208], ['null', 208, 46, 192], ['null', 208, 46, 175], ['null', 208, 46, 159], ['null', 208, 46, 143], ['null', 208, 46, 127], ['null', 208, 46, 111], ['null', 208, 46, 95], ['null', 208, 46, 79], ['null', 208, 46, 62], [360.0, 208, 46, 46]];
fomcolourgradvalarray[19] = [[0.0, 205, 49, 49], ['null', 205, 65, 49], ['null', 205, 80, 49], ['null', 205, 96, 49], ['null', 205, 111, 49], ['null', 205, 127, 49], ['null', 205, 143, 49], ['null', 205, 158, 49], ['null', 205, 174, 49], ['null', 205, 189, 49], [60.0, 205, 205, 49], ['null', 189, 205, 49], ['null', 174, 205, 49], ['null', 158, 205, 49], ['null', 143, 205, 49], ['null', 127, 205, 49], ['null', 111, 205, 49], ['null', 96, 205, 49], ['null', 80, 205, 49], ['null', 65, 205, 49], [120.0, 49, 205, 49], ['null', 49, 205, 65], ['null', 49, 205, 80], ['null', 49, 205, 96], ['null', 49, 205, 111], ['null', 49, 205, 127], ['null', 49, 205, 143], ['null', 49, 205, 158], ['null', 49, 205, 174], ['null', 49, 205, 189], [180.0, 49, 205, 205], ['null', 49, 189, 205], ['null', 49, 174, 205], ['null', 49, 158, 205], ['null', 49, 143, 205], ['null', 49, 127, 205], ['null', 49, 111, 205], ['null', 49, 96, 205], ['null', 49, 80, 205], ['null', 49, 65, 205], [240.0, 49, 49, 205], ['null', 65, 49, 205], ['null', 80, 49, 205], ['null', 96, 49, 205], ['null', 111, 49, 205], ['null', 127, 49, 205], ['null', 143, 49, 205], ['null', 158, 49, 205], ['null', 174, 49, 205], ['null', 189, 49, 205], [300.0, 205, 49, 205], ['null', 205, 49, 189], ['null', 205, 49, 174], ['null', 205, 49, 158], ['null', 205, 49, 143], ['null', 205, 49, 127], ['null', 205, 49, 111], ['null', 205, 49, 96], ['null', 205, 49, 80], ['null', 205, 49, 65], [360.0, 205, 49, 49]];
fomcolourgradvalarray[20] = [[0.0, 202, 52, 52], ['null', 202, 67, 52], ['null', 202, 82, 52], ['null', 202, 97, 52], ['null', 202, 112, 52], ['null', 202, 127, 52], ['null', 202, 142, 52], ['null', 202, 157, 52], ['null', 202, 172, 52], ['null', 202, 187, 52], [60.0, 202, 202, 52], ['null', 187, 202, 52], ['null', 172, 202, 52], ['null', 157, 202, 52], ['null', 142, 202, 52], ['null', 127, 202, 52], ['null', 112, 202, 52], ['null', 97, 202, 52], ['null', 82, 202, 52], ['null', 67, 202, 52], [120.0, 52, 202, 52], ['null', 52, 202, 67], ['null', 52, 202, 82], ['null', 52, 202, 97], ['null', 52, 202, 112], ['null', 52, 202, 127], ['null', 52, 202, 142], ['null', 52, 202, 157], ['null', 52, 202, 172], ['null', 52, 202, 187], [180.0, 52, 202, 202], ['null', 52, 187, 202], ['null', 52, 172, 202], ['null', 52, 157, 202], ['null', 52, 142, 202], ['null', 52, 127, 202], ['null', 52, 112, 202], ['null', 52, 97, 202], ['null', 52, 82, 202], ['null', 52, 67, 202], [240.0, 52, 52, 202], ['null', 67, 52, 202], ['null', 82, 52, 202], ['null', 97, 52, 202], ['null', 112, 52, 202], ['null', 127, 52, 202], ['null', 142, 52, 202], ['null', 157, 52, 202], ['null', 172, 52, 202], ['null', 187, 52, 202], [300.0, 202, 52, 202], ['null', 202, 52, 187], ['null', 202, 52, 172], ['null', 202, 52, 157], ['null', 202, 52, 142], ['null', 202, 52, 127], ['null', 202, 52, 112], ['null', 202, 52, 97], ['null', 202, 52, 82], ['null', 202, 52, 67], [360.0, 202, 52, 52]];
fomcolourgradvalarray[21] = [[0.0, 200, 54, 54], ['null', 200, 69, 54], ['null', 200, 83, 54], ['null', 200, 98, 54], ['null', 200, 112, 54], ['null', 200, 127, 54], ['null', 200, 142, 54], ['null', 200, 156, 54], ['null', 200, 171, 54], ['null', 200, 185, 54], [60.0, 200, 200, 54], ['null', 185, 200, 54], ['null', 171, 200, 54], ['null', 156, 200, 54], ['null', 142, 200, 54], ['null', 127, 200, 54], ['null', 112, 200, 54], ['null', 98, 200, 54], ['null', 83, 200, 54], ['null', 69, 200, 54], [120.0, 54, 200, 54], ['null', 54, 200, 69], ['null', 54, 200, 83], ['null', 54, 200, 98], ['null', 54, 200, 112], ['null', 54, 200, 127], ['null', 54, 200, 142], ['null', 54, 200, 156], ['null', 54, 200, 171], ['null', 54, 200, 185], [180.0, 54, 200, 200], ['null', 54, 185, 200], ['null', 54, 171, 200], ['null', 54, 156, 200], ['null', 54, 142, 200], ['null', 54, 127, 200], ['null', 54, 112, 200], ['null', 54, 98, 200], ['null', 54, 83, 200], ['null', 54, 69, 200], [240.0, 54, 54, 200], ['null', 69, 54, 200], ['null', 83, 54, 200], ['null', 98, 54, 200], ['null', 112, 54, 200], ['null', 127, 54, 200], ['null', 142, 54, 200], ['null', 156, 54, 200], ['null', 171, 54, 200], ['null', 185, 54, 200], [300.0, 200, 54, 200], ['null', 200, 54, 185], ['null', 200, 54, 171], ['null', 200, 54, 156], ['null', 200, 54, 142], ['null', 200, 54, 127], ['null', 200, 54, 112], ['null', 200, 54, 98], ['null', 200, 54, 83], ['null', 200, 54, 69], [360.0, 200, 54, 54]];
fomcolourgradvalarray[22] = [[0.0, 197, 57, 57], ['null', 197, 71, 57], ['null', 197, 85, 57], ['null', 197, 99, 57], ['null', 197, 113, 57], ['null', 197, 127, 57], ['null', 197, 141, 57], ['null', 197, 155, 57], ['null', 197, 169, 57], ['null', 197, 183, 57], [60.0, 197, 197, 57], ['null', 183, 197, 57], ['null', 169, 197, 57], ['null', 155, 197, 57], ['null', 141, 197, 57], ['null', 127, 197, 57], ['null', 113, 197, 57], ['null', 99, 197, 57], ['null', 85, 197, 57], ['null', 71, 197, 57], [120.0, 57, 197, 57], ['null', 57, 197, 71], ['null', 57, 197, 85], ['null', 57, 197, 99], ['null', 57, 197, 113], ['null', 57, 197, 127], ['null', 57, 197, 141], ['null', 57, 197, 155], ['null', 57, 197, 169], ['null', 57, 197, 183], [180.0, 57, 197, 197], ['null', 57, 183, 197], ['null', 57, 169, 197], ['null', 57, 155, 197], ['null', 57, 141, 197], ['null', 57, 127, 197], ['null', 57, 113, 197], ['null', 57, 99, 197], ['null', 57, 85, 197], ['null', 57, 71, 197], [240.0, 57, 57, 197], ['null', 71, 57, 197], ['null', 85, 57, 197], ['null', 99, 57, 197], ['null', 113, 57, 197], ['null', 127, 57, 197], ['null', 141, 57, 197], ['null', 155, 57, 197], ['null', 169, 57, 197], ['null', 183, 57, 197], [300.0, 197, 57, 197], ['null', 197, 57, 183], ['null', 197, 57, 169], ['null', 197, 57, 155], ['null', 197, 57, 141], ['null', 197, 57, 127], ['null', 197, 57, 113], ['null', 197, 57, 99], ['null', 197, 57, 85], ['null', 197, 57, 71], [360.0, 197, 57, 57]];
fomcolourgradvalarray[23] = [[0.0, 195, 59, 59], ['null', 195, 73, 59], ['null', 195, 86, 59], ['null', 195, 100, 59], ['null', 195, 113, 59], ['null', 195, 127, 59], ['null', 195, 141, 59], ['null', 195, 154, 59], ['null', 195, 168, 59], ['null', 195, 181, 59], [60.0, 195, 195, 59], ['null', 181, 195, 59], ['null', 168, 195, 59], ['null', 154, 195, 59], ['null', 141, 195, 59], ['null', 127, 195, 59], ['null', 113, 195, 59], ['null', 100, 195, 59], ['null', 86, 195, 59], ['null', 73, 195, 59], [120.0, 59, 195, 59], ['null', 59, 195, 73], ['null', 59, 195, 86], ['null', 59, 195, 100], ['null', 59, 195, 113], ['null', 59, 195, 127], ['null', 59, 195, 141], ['null', 59, 195, 154], ['null', 59, 195, 168], ['null', 59, 195, 181], [180.0, 59, 195, 195], ['null', 59, 181, 195], ['null', 59, 168, 195], ['null', 59, 154, 195], ['null', 59, 141, 195], ['null', 59, 127, 195], ['null', 59, 113, 195], ['null', 59, 100, 195], ['null', 59, 86, 195], ['null', 59, 73, 195], [240.0, 59, 59, 195], ['null', 73, 59, 195], ['null', 86, 59, 195], ['null', 100, 59, 195], ['null', 113, 59, 195], ['null', 127, 59, 195], ['null', 141, 59, 195], ['null', 154, 59, 195], ['null', 168, 59, 195], ['null', 181, 59, 195], [300.0, 195, 59, 195], ['null', 195, 59, 181], ['null', 195, 59, 168], ['null', 195, 59, 154], ['null', 195, 59, 141], ['null', 195, 59, 127], ['null', 195, 59, 113], ['null', 195, 59, 100], ['null', 195, 59, 86], ['null', 195, 59, 73], [360.0, 195, 59, 59]];
fomcolourgradvalarray[24] = [[0.0, 192, 62, 62], ['null', 192, 75, 62], ['null', 192, 88, 62], ['null', 192, 101, 62], ['null', 192, 114, 62], ['null', 192, 127, 62], ['null', 192, 140, 62], ['null', 192, 153, 62], ['null', 192, 166, 62], ['null', 192, 179, 62], [60.0, 192, 192, 62], ['null', 179, 192, 62], ['null', 166, 192, 62], ['null', 153, 192, 62], ['null', 140, 192, 62], ['null', 127, 192, 62], ['null', 114, 192, 62], ['null', 101, 192, 62], ['null', 88, 192, 62], ['null', 75, 192, 62], [120.0, 62, 192, 62], ['null', 62, 192, 75], ['null', 62, 192, 88], ['null', 62, 192, 101], ['null', 62, 192, 114], ['null', 62, 192, 127], ['null', 62, 192, 140], ['null', 62, 192, 153], ['null', 62, 192, 166], ['null', 62, 192, 179], [180.0, 62, 192, 192], ['null', 62, 179, 192], ['null', 62, 166, 192], ['null', 62, 153, 192], ['null', 62, 140, 192], ['null', 62, 127, 192], ['null', 62, 114, 192], ['null', 62, 101, 192], ['null', 62, 88, 192], ['null', 62, 75, 192], [240.0, 62, 62, 192], ['null', 75, 62, 192], ['null', 88, 62, 192], ['null', 101, 62, 192], ['null', 114, 62, 192], ['null', 127, 62, 192], ['null', 140, 62, 192], ['null', 153, 62, 192], ['null', 166, 62, 192], ['null', 179, 62, 192], [300.0, 192, 62, 192], ['null', 192, 62, 179], ['null', 192, 62, 166], ['null', 192, 62, 153], ['null', 192, 62, 140], ['null', 192, 62, 127], ['null', 192, 62, 114], ['null', 192, 62, 101], ['null', 192, 62, 88], ['null', 192, 62, 75], [360.0, 192, 62, 62]];
fomcolourgradvalarray[25] = [[0.0, 189, 65, 65], ['null', 189, 77, 65], ['null', 189, 90, 65], ['null', 189, 102, 65], ['null', 189, 115, 65], ['null', 189, 127, 65], ['null', 189, 139, 65], ['null', 189, 152, 65], ['null', 189, 164, 65], ['null', 189, 177, 65], [60.0, 189, 189, 65], ['null', 177, 189, 65], ['null', 164, 189, 65], ['null', 152, 189, 65], ['null', 139, 189, 65], ['null', 127, 189, 65], ['null', 115, 189, 65], ['null', 102, 189, 65], ['null', 90, 189, 65], ['null', 77, 189, 65], [120.0, 65, 189, 65], ['null', 65, 189, 77], ['null', 65, 189, 90], ['null', 65, 189, 102], ['null', 65, 189, 115], ['null', 65, 189, 127], ['null', 65, 189, 139], ['null', 65, 189, 152], ['null', 65, 189, 164], ['null', 65, 189, 177], [180.0, 65, 189, 189], ['null', 65, 177, 189], ['null', 65, 164, 189], ['null', 65, 152, 189], ['null', 65, 139, 189], ['null', 65, 127, 189], ['null', 65, 115, 189], ['null', 65, 102, 189], ['null', 65, 90, 189], ['null', 65, 77, 189], [240.0, 65, 65, 189], ['null', 77, 65, 189], ['null', 90, 65, 189], ['null', 102, 65, 189], ['null', 115, 65, 189], ['null', 127, 65, 189], ['null', 139, 65, 189], ['null', 152, 65, 189], ['null', 164, 65, 189], ['null', 177, 65, 189], [300.0, 189, 65, 189], ['null', 189, 65, 177], ['null', 189, 65, 164], ['null', 189, 65, 152], ['null', 189, 65, 139], ['null', 189, 65, 127], ['null', 189, 65, 115], ['null', 189, 65, 102], ['null', 189, 65, 90], ['null', 189, 65, 77], [360.0, 189, 65, 65]];
fomcolourgradvalarray[26] = [[0.0, 187, 67, 67], ['null', 187, 79, 67], ['null', 187, 91, 67], ['null', 187, 103, 67], ['null', 187, 115, 67], ['null', 187, 127, 67], ['null', 187, 139, 67], ['null', 187, 151, 67], ['null', 187, 163, 67], ['null', 187, 175, 67], [60.0, 187, 187, 67], ['null', 175, 187, 67], ['null', 163, 187, 67], ['null', 151, 187, 67], ['null', 139, 187, 67], ['null', 127, 187, 67], ['null', 115, 187, 67], ['null', 103, 187, 67], ['null', 91, 187, 67], ['null', 79, 187, 67], [120.0, 67, 187, 67], ['null', 67, 187, 79], ['null', 67, 187, 91], ['null', 67, 187, 103], ['null', 67, 187, 115], ['null', 67, 187, 127], ['null', 67, 187, 139], ['null', 67, 187, 151], ['null', 67, 187, 163], ['null', 67, 187, 175], [180.0, 67, 187, 187], ['null', 67, 175, 187], ['null', 67, 163, 187], ['null', 67, 151, 187], ['null', 67, 139, 187], ['null', 67, 127, 187], ['null', 67, 115, 187], ['null', 67, 103, 187], ['null', 67, 91, 187], ['null', 67, 79, 187], [240.0, 67, 67, 187], ['null', 79, 67, 187], ['null', 91, 67, 187], ['null', 103, 67, 187], ['null', 115, 67, 187], ['null', 127, 67, 187], ['null', 139, 67, 187], ['null', 151, 67, 187], ['null', 163, 67, 187], ['null', 175, 67, 187], [300.0, 187, 67, 187], ['null', 187, 67, 175], ['null', 187, 67, 163], ['null', 187, 67, 151], ['null', 187, 67, 139], ['null', 187, 67, 127], ['null', 187, 67, 115], ['null', 187, 67, 103], ['null', 187, 67, 91], ['null', 187, 67, 79], [360.0, 187, 67, 67]];
fomcolourgradvalarray[27] = [[0.0, 184, 70, 70], ['null', 184, 81, 70], ['null', 184, 93, 70], ['null', 184, 104, 70], ['null', 184, 116, 70], ['null', 184, 127, 70], ['null', 184, 138, 70], ['null', 184, 150, 70], ['null', 184, 161, 70], ['null', 184, 173, 70], [60.0, 184, 184, 70], ['null', 173, 184, 70], ['null', 161, 184, 70], ['null', 150, 184, 70], ['null', 138, 184, 70], ['null', 127, 184, 70], ['null', 116, 184, 70], ['null', 104, 184, 70], ['null', 93, 184, 70], ['null', 81, 184, 70], [120.0, 70, 184, 70], ['null', 70, 184, 81], ['null', 70, 184, 93], ['null', 70, 184, 104], ['null', 70, 184, 116], ['null', 70, 184, 127], ['null', 70, 184, 138], ['null', 70, 184, 150], ['null', 70, 184, 161], ['null', 70, 184, 173], [180.0, 70, 184, 184], ['null', 70, 173, 184], ['null', 70, 161, 184], ['null', 70, 150, 184], ['null', 70, 138, 184], ['null', 70, 127, 184], ['null', 70, 116, 184], ['null', 70, 104, 184], ['null', 70, 93, 184], ['null', 70, 81, 184], [240.0, 70, 70, 184], ['null', 81, 70, 184], ['null', 93, 70, 184], ['null', 104, 70, 184], ['null', 116, 70, 184], ['null', 127, 70, 184], ['null', 138, 70, 184], ['null', 150, 70, 184], ['null', 161, 70, 184], ['null', 173, 70, 184], [300.0, 184, 70, 184], ['null', 184, 70, 173], ['null', 184, 70, 161], ['null', 184, 70, 150], ['null', 184, 70, 138], ['null', 184, 70, 127], ['null', 184, 70, 116], ['null', 184, 70, 104], ['null', 184, 70, 93], ['null', 184, 70, 81], [360.0, 184, 70, 70]];
fomcolourgradvalarray[28] = [[0.0, 182, 72, 72], ['null', 182, 83, 72], ['null', 182, 94, 72], ['null', 182, 105, 72], ['null', 182, 116, 72], ['null', 182, 127, 72], ['null', 182, 138, 72], ['null', 182, 149, 72], ['null', 182, 160, 72], ['null', 182, 171, 72], [60.0, 182, 182, 72], ['null', 171, 182, 72], ['null', 160, 182, 72], ['null', 149, 182, 72], ['null', 138, 182, 72], ['null', 127, 182, 72], ['null', 116, 182, 72], ['null', 105, 182, 72], ['null', 94, 182, 72], ['null', 83, 182, 72], [120.0, 72, 182, 72], ['null', 72, 182, 83], ['null', 72, 182, 94], ['null', 72, 182, 105], ['null', 72, 182, 116], ['null', 72, 182, 127], ['null', 72, 182, 138], ['null', 72, 182, 149], ['null', 72, 182, 160], ['null', 72, 182, 171], [180.0, 72, 182, 182], ['null', 72, 171, 182], ['null', 72, 160, 182], ['null', 72, 149, 182], ['null', 72, 138, 182], ['null', 72, 127, 182], ['null', 72, 116, 182], ['null', 72, 105, 182], ['null', 72, 94, 182], ['null', 72, 83, 182], [240.0, 72, 72, 182], ['null', 83, 72, 182], ['null', 94, 72, 182], ['null', 105, 72, 182], ['null', 116, 72, 182], ['null', 127, 72, 182], ['null', 138, 72, 182], ['null', 149, 72, 182], ['null', 160, 72, 182], ['null', 171, 72, 182], [300.0, 182, 72, 182], ['null', 182, 72, 171], ['null', 182, 72, 160], ['null', 182, 72, 149], ['null', 182, 72, 138], ['null', 182, 72, 127], ['null', 182, 72, 116], ['null', 182, 72, 105], ['null', 182, 72, 94], ['null', 182, 72, 83], [360.0, 182, 72, 72]];
fomcolourgradvalarray[29] = [[0.0, 179, 75, 75], ['null', 179, 85, 75], ['null', 179, 96, 75], ['null', 179, 106, 75], ['null', 179, 117, 75], ['null', 179, 127, 75], ['null', 179, 137, 75], ['null', 179, 148, 75], ['null', 179, 158, 75], ['null', 179, 169, 75], [60.0, 179, 179, 75], ['null', 169, 179, 75], ['null', 158, 179, 75], ['null', 148, 179, 75], ['null', 137, 179, 75], ['null', 127, 179, 75], ['null', 117, 179, 75], ['null', 106, 179, 75], ['null', 96, 179, 75], ['null', 85, 179, 75], [120.0, 75, 179, 75], ['null', 75, 179, 85], ['null', 75, 179, 96], ['null', 75, 179, 106], ['null', 75, 179, 117], ['null', 75, 179, 127], ['null', 75, 179, 137], ['null', 75, 179, 148], ['null', 75, 179, 158], ['null', 75, 179, 169], [180.0, 75, 179, 179], ['null', 75, 169, 179], ['null', 75, 158, 179], ['null', 75, 148, 179], ['null', 75, 137, 179], ['null', 75, 127, 179], ['null', 75, 117, 179], ['null', 75, 106, 179], ['null', 75, 96, 179], ['null', 75, 85, 179], [240.0, 75, 75, 179], ['null', 85, 75, 179], ['null', 96, 75, 179], ['null', 106, 75, 179], ['null', 117, 75, 179], ['null', 127, 75, 179], ['null', 137, 75, 179], ['null', 148, 75, 179], ['null', 158, 75, 179], ['null', 169, 75, 179], [300.0, 179, 75, 179], ['null', 179, 75, 169], ['null', 179, 75, 158], ['null', 179, 75, 148], ['null', 179, 75, 137], ['null', 179, 75, 127], ['null', 179, 75, 117], ['null', 179, 75, 106], ['null', 179, 75, 96], ['null', 179, 75, 85], [360.0, 179, 75, 75]];
fomcolourgradvalarray[30] = [[0.0, 176, 78, 78], ['null', 176, 87, 78], ['null', 176, 97, 78], ['null', 176, 107, 78], ['null', 176, 117, 78], ['null', 176, 127, 78], ['null', 176, 137, 78], ['null', 176, 147, 78], ['null', 176, 157, 78], ['null', 176, 167, 78], [60.0, 176, 176, 78], ['null', 167, 176, 78], ['null', 157, 176, 78], ['null', 147, 176, 78], ['null', 137, 176, 78], ['null', 127, 176, 78], ['null', 117, 176, 78], ['null', 107, 176, 78], ['null', 97, 176, 78], ['null', 87, 176, 78], [120.0, 78, 176, 78], ['null', 78, 176, 87], ['null', 78, 176, 97], ['null', 78, 176, 107], ['null', 78, 176, 117], ['null', 78, 176, 127], ['null', 78, 176, 137], ['null', 78, 176, 147], ['null', 78, 176, 157], ['null', 78, 176, 167], [180.0, 78, 176, 176], ['null', 78, 167, 176], ['null', 78, 157, 176], ['null', 78, 147, 176], ['null', 78, 137, 176], ['null', 78, 127, 176], ['null', 78, 117, 176], ['null', 78, 107, 176], ['null', 78, 97, 176], ['null', 78, 87, 176], [240.0, 78, 78, 176], ['null', 87, 78, 176], ['null', 97, 78, 176], ['null', 107, 78, 176], ['null', 117, 78, 176], ['null', 127, 78, 176], ['null', 137, 78, 176], ['null', 147, 78, 176], ['null', 157, 78, 176], ['null', 167, 78, 176], [300.0, 176, 78, 176], ['null', 176, 78, 167], ['null', 176, 78, 157], ['null', 176, 78, 147], ['null', 176, 78, 137], ['null', 176, 78, 127], ['null', 176, 78, 117], ['null', 176, 78, 107], ['null', 176, 78, 97], ['null', 176, 78, 87], [360.0, 176, 78, 78]];
fomcolourgradvalarray[31] = [[0.0, 174, 80, 80], ['null', 174, 90, 80], ['null', 174, 99, 80], ['null', 174, 108, 80], ['null', 174, 118, 80], ['null', 174, 127, 80], ['null', 174, 136, 80], ['null', 174, 146, 80], ['null', 174, 155, 80], ['null', 174, 164, 80], [60.0, 174, 174, 80], ['null', 164, 174, 80], ['null', 155, 174, 80], ['null', 146, 174, 80], ['null', 136, 174, 80], ['null', 127, 174, 80], ['null', 118, 174, 80], ['null', 108, 174, 80], ['null', 99, 174, 80], ['null', 90, 174, 80], [120.0, 80, 174, 80], ['null', 80, 174, 90], ['null', 80, 174, 99], ['null', 80, 174, 108], ['null', 80, 174, 118], ['null', 80, 174, 127], ['null', 80, 174, 136], ['null', 80, 174, 146], ['null', 80, 174, 155], ['null', 80, 174, 164], [180.0, 80, 174, 174], ['null', 80, 164, 174], ['null', 80, 155, 174], ['null', 80, 146, 174], ['null', 80, 136, 174], ['null', 80, 127, 174], ['null', 80, 118, 174], ['null', 80, 108, 174], ['null', 80, 99, 174], ['null', 80, 90, 174], [240.0, 80, 80, 174], ['null', 90, 80, 174], ['null', 99, 80, 174], ['null', 108, 80, 174], ['null', 118, 80, 174], ['null', 127, 80, 174], ['null', 136, 80, 174], ['null', 146, 80, 174], ['null', 155, 80, 174], ['null', 164, 80, 174], [300.0, 174, 80, 174], ['null', 174, 80, 164], ['null', 174, 80, 155], ['null', 174, 80, 146], ['null', 174, 80, 136], ['null', 174, 80, 127], ['null', 174, 80, 118], ['null', 174, 80, 108], ['null', 174, 80, 99], ['null', 174, 80, 90], [360.0, 174, 80, 80]];
fomcolourgradvalarray[32] = [[0.0, 171, 83, 83], ['null', 171, 92, 83], ['null', 171, 100, 83], ['null', 171, 109, 83], ['null', 171, 118, 83], ['null', 171, 127, 83], ['null', 171, 136, 83], ['null', 171, 145, 83], ['null', 171, 154, 83], ['null', 171, 162, 83], [60.0, 171, 171, 83], ['null', 162, 171, 83], ['null', 154, 171, 83], ['null', 145, 171, 83], ['null', 136, 171, 83], ['null', 127, 171, 83], ['null', 118, 171, 83], ['null', 109, 171, 83], ['null', 100, 171, 83], ['null', 92, 171, 83], [120.0, 83, 171, 83], ['null', 83, 171, 92], ['null', 83, 171, 100], ['null', 83, 171, 109], ['null', 83, 171, 118], ['null', 83, 171, 127], ['null', 83, 171, 136], ['null', 83, 171, 145], ['null', 83, 171, 154], ['null', 83, 171, 162], [180.0, 83, 171, 171], ['null', 83, 162, 171], ['null', 83, 154, 171], ['null', 83, 145, 171], ['null', 83, 136, 171], ['null', 83, 127, 171], ['null', 83, 118, 171], ['null', 83, 109, 171], ['null', 83, 100, 171], ['null', 83, 92, 171], [240.0, 83, 83, 171], ['null', 92, 83, 171], ['null', 100, 83, 171], ['null', 109, 83, 171], ['null', 118, 83, 171], ['null', 127, 83, 171], ['null', 136, 83, 171], ['null', 145, 83, 171], ['null', 154, 83, 171], ['null', 162, 83, 171], [300.0, 171, 83, 171], ['null', 171, 83, 162], ['null', 171, 83, 154], ['null', 171, 83, 145], ['null', 171, 83, 136], ['null', 171, 83, 127], ['null', 171, 83, 118], ['null', 171, 83, 109], ['null', 171, 83, 100], ['null', 171, 83, 92], [360.0, 171, 83, 83]];
fomcolourgradvalarray[33] = [[0.0, 169, 85, 85], ['null', 169, 94, 85], ['null', 169, 102, 85], ['null', 169, 110, 85], ['null', 169, 119, 85], ['null', 169, 127, 85], ['null', 169, 135, 85], ['null', 169, 144, 85], ['null', 169, 152, 85], ['null', 169, 160, 85], [60.0, 169, 169, 85], ['null', 160, 169, 85], ['null', 152, 169, 85], ['null', 144, 169, 85], ['null', 135, 169, 85], ['null', 127, 169, 85], ['null', 119, 169, 85], ['null', 110, 169, 85], ['null', 102, 169, 85], ['null', 94, 169, 85], [120.0, 85, 169, 85], ['null', 85, 169, 94], ['null', 85, 169, 102], ['null', 85, 169, 110], ['null', 85, 169, 119], ['null', 85, 169, 127], ['null', 85, 169, 135], ['null', 85, 169, 144], ['null', 85, 169, 152], ['null', 85, 169, 160], [180.0, 85, 169, 169], ['null', 85, 160, 169], ['null', 85, 152, 169], ['null', 85, 144, 169], ['null', 85, 135, 169], ['null', 85, 127, 169], ['null', 85, 119, 169], ['null', 85, 110, 169], ['null', 85, 102, 169], ['null', 85, 94, 169], [240.0, 85, 85, 169], ['null', 94, 85, 169], ['null', 102, 85, 169], ['null', 110, 85, 169], ['null', 119, 85, 169], ['null', 127, 85, 169], ['null', 135, 85, 169], ['null', 144, 85, 169], ['null', 152, 85, 169], ['null', 160, 85, 169], [300.0, 169, 85, 169], ['null', 169, 85, 160], ['null', 169, 85, 152], ['null', 169, 85, 144], ['null', 169, 85, 135], ['null', 169, 85, 127], ['null', 169, 85, 119], ['null', 169, 85, 110], ['null', 169, 85, 102], ['null', 169, 85, 94], [360.0, 169, 85, 85]];
fomcolourgradvalarray[34] = [[0.0, 166, 88, 88], ['null', 166, 96, 88], ['null', 166, 104, 88], ['null', 166, 111, 88], ['null', 166, 119, 88], ['null', 166, 127, 88], ['null', 166, 135, 88], ['null', 166, 143, 88], ['null', 166, 150, 88], ['null', 166, 158, 88], [60.0, 166, 166, 88], ['null', 158, 166, 88], ['null', 150, 166, 88], ['null', 143, 166, 88], ['null', 135, 166, 88], ['null', 127, 166, 88], ['null', 119, 166, 88], ['null', 111, 166, 88], ['null', 104, 166, 88], ['null', 96, 166, 88], [120.0, 88, 166, 88], ['null', 88, 166, 96], ['null', 88, 166, 104], ['null', 88, 166, 111], ['null', 88, 166, 119], ['null', 88, 166, 127], ['null', 88, 166, 135], ['null', 88, 166, 143], ['null', 88, 166, 150], ['null', 88, 166, 158], [180.0, 88, 166, 166], ['null', 88, 158, 166], ['null', 88, 150, 166], ['null', 88, 143, 166], ['null', 88, 135, 166], ['null', 88, 127, 166], ['null', 88, 119, 166], ['null', 88, 111, 166], ['null', 88, 104, 166], ['null', 88, 96, 166], [240.0, 88, 88, 166], ['null', 96, 88, 166], ['null', 104, 88, 166], ['null', 111, 88, 166], ['null', 119, 88, 166], ['null', 127, 88, 166], ['null', 135, 88, 166], ['null', 143, 88, 166], ['null', 150, 88, 166], ['null', 158, 88, 166], [300.0, 166, 88, 166], ['null', 166, 88, 158], ['null', 166, 88, 150], ['null', 166, 88, 143], ['null', 166, 88, 135], ['null', 166, 88, 127], ['null', 166, 88, 119], ['null', 166, 88, 111], ['null', 166, 88, 104], ['null', 166, 88, 96], [360.0, 166, 88, 88]];
fomcolourgradvalarray[35] = [[0.0, 163, 91, 91], ['null', 163, 98, 91], ['null', 163, 105, 91], ['null', 163, 112, 91], ['null', 163, 120, 91], ['null', 163, 127, 91], ['null', 163, 134, 91], ['null', 163, 142, 91], ['null', 163, 149, 91], ['null', 163, 156, 91], [60.0, 163, 163, 91], ['null', 156, 163, 91], ['null', 149, 163, 91], ['null', 142, 163, 91], ['null', 134, 163, 91], ['null', 127, 163, 91], ['null', 120, 163, 91], ['null', 112, 163, 91], ['null', 105, 163, 91], ['null', 98, 163, 91], [120.0, 91, 163, 91], ['null', 91, 163, 98], ['null', 91, 163, 105], ['null', 91, 163, 112], ['null', 91, 163, 120], ['null', 91, 163, 127], ['null', 91, 163, 134], ['null', 91, 163, 142], ['null', 91, 163, 149], ['null', 91, 163, 156], [180.0, 91, 163, 163], ['null', 91, 156, 163], ['null', 91, 149, 163], ['null', 91, 142, 163], ['null', 91, 134, 163], ['null', 91, 127, 163], ['null', 91, 120, 163], ['null', 91, 112, 163], ['null', 91, 105, 163], ['null', 91, 98, 163], [240.0, 91, 91, 163], ['null', 98, 91, 163], ['null', 105, 91, 163], ['null', 112, 91, 163], ['null', 120, 91, 163], ['null', 127, 91, 163], ['null', 134, 91, 163], ['null', 142, 91, 163], ['null', 149, 91, 163], ['null', 156, 91, 163], [300.0, 163, 91, 163], ['null', 163, 91, 156], ['null', 163, 91, 149], ['null', 163, 91, 142], ['null', 163, 91, 134], ['null', 163, 91, 127], ['null', 163, 91, 120], ['null', 163, 91, 112], ['null', 163, 91, 105], ['null', 163, 91, 98], [360.0, 163, 91, 91]];
fomcolourgradvalarray[36] = [[0.0, 161, 93, 93], ['null', 161, 100, 93], ['null', 161, 107, 93], ['null', 161, 113, 93], ['null', 161, 120, 93], ['null', 161, 127, 93], ['null', 161, 134, 93], ['null', 161, 141, 93], ['null', 161, 147, 93], ['null', 161, 154, 93], [60.0, 161, 161, 93], ['null', 154, 161, 93], ['null', 147, 161, 93], ['null', 141, 161, 93], ['null', 134, 161, 93], ['null', 127, 161, 93], ['null', 120, 161, 93], ['null', 113, 161, 93], ['null', 107, 161, 93], ['null', 100, 161, 93], [120.0, 93, 161, 93], ['null', 93, 161, 100], ['null', 93, 161, 107], ['null', 93, 161, 113], ['null', 93, 161, 120], ['null', 93, 161, 127], ['null', 93, 161, 134], ['null', 93, 161, 141], ['null', 93, 161, 147], ['null', 93, 161, 154], [180.0, 93, 161, 161], ['null', 93, 154, 161], ['null', 93, 147, 161], ['null', 93, 141, 161], ['null', 93, 134, 161], ['null', 93, 127, 161], ['null', 93, 120, 161], ['null', 93, 113, 161], ['null', 93, 107, 161], ['null', 93, 100, 161], [240.0, 93, 93, 161], ['null', 100, 93, 161], ['null', 107, 93, 161], ['null', 113, 93, 161], ['null', 120, 93, 161], ['null', 127, 93, 161], ['null', 134, 93, 161], ['null', 141, 93, 161], ['null', 147, 93, 161], ['null', 154, 93, 161], [300.0, 161, 93, 161], ['null', 161, 93, 154], ['null', 161, 93, 147], ['null', 161, 93, 141], ['null', 161, 93, 134], ['null', 161, 93, 127], ['null', 161, 93, 120], ['null', 161, 93, 113], ['null', 161, 93, 107], ['null', 161, 93, 100], [360.0, 161, 93, 93]];
fomcolourgradvalarray[37] = [[0.0, 158, 96, 96], ['null', 158, 102, 96], ['null', 158, 108, 96], ['null', 158, 115, 96], ['null', 158, 121, 96], ['null', 158, 127, 96], ['null', 158, 133, 96], ['null', 158, 139, 96], ['null', 158, 146, 96], ['null', 158, 152, 96], [60.0, 158, 158, 96], ['null', 152, 158, 96], ['null', 146, 158, 96], ['null', 139, 158, 96], ['null', 133, 158, 96], ['null', 127, 158, 96], ['null', 121, 158, 96], ['null', 115, 158, 96], ['null', 108, 158, 96], ['null', 102, 158, 96], [120.0, 96, 158, 96], ['null', 96, 158, 102], ['null', 96, 158, 108], ['null', 96, 158, 115], ['null', 96, 158, 121], ['null', 96, 158, 127], ['null', 96, 158, 133], ['null', 96, 158, 139], ['null', 96, 158, 146], ['null', 96, 158, 152], [180.0, 96, 158, 158], ['null', 96, 152, 158], ['null', 96, 146, 158], ['null', 96, 139, 158], ['null', 96, 133, 158], ['null', 96, 127, 158], ['null', 96, 121, 158], ['null', 96, 115, 158], ['null', 96, 108, 158], ['null', 96, 102, 158], [240.0, 96, 96, 158], ['null', 102, 96, 158], ['null', 108, 96, 158], ['null', 115, 96, 158], ['null', 121, 96, 158], ['null', 127, 96, 158], ['null', 133, 96, 158], ['null', 139, 96, 158], ['null', 146, 96, 158], ['null', 152, 96, 158], [300.0, 158, 96, 158], ['null', 158, 96, 152], ['null', 158, 96, 146], ['null', 158, 96, 139], ['null', 158, 96, 133], ['null', 158, 96, 127], ['null', 158, 96, 121], ['null', 158, 96, 115], ['null', 158, 96, 108], ['null', 158, 96, 102], [360.0, 158, 96, 96]];
fomcolourgradvalarray[38] = [[0.0, 156, 98, 98], ['null', 156, 104, 98], ['null', 156, 110, 98], ['null', 156, 116, 98], ['null', 156, 121, 98], ['null', 156, 127, 98], ['null', 156, 133, 98], ['null', 156, 138, 98], ['null', 156, 144, 98], ['null', 156, 150, 98], [60.0, 156, 156, 98], ['null', 150, 156, 98], ['null', 144, 156, 98], ['null', 138, 156, 98], ['null', 133, 156, 98], ['null', 127, 156, 98], ['null', 121, 156, 98], ['null', 116, 156, 98], ['null', 110, 156, 98], ['null', 104, 156, 98], [120.0, 98, 156, 98], ['null', 98, 156, 104], ['null', 98, 156, 110], ['null', 98, 156, 116], ['null', 98, 156, 121], ['null', 98, 156, 127], ['null', 98, 156, 133], ['null', 98, 156, 138], ['null', 98, 156, 144], ['null', 98, 156, 150], [180.0, 98, 156, 156], ['null', 98, 150, 156], ['null', 98, 144, 156], ['null', 98, 138, 156], ['null', 98, 133, 156], ['null', 98, 127, 156], ['null', 98, 121, 156], ['null', 98, 116, 156], ['null', 98, 110, 156], ['null', 98, 104, 156], [240.0, 98, 98, 156], ['null', 104, 98, 156], ['null', 110, 98, 156], ['null', 116, 98, 156], ['null', 121, 98, 156], ['null', 127, 98, 156], ['null', 133, 98, 156], ['null', 138, 98, 156], ['null', 144, 98, 156], ['null', 150, 98, 156], [300.0, 156, 98, 156], ['null', 156, 98, 150], ['null', 156, 98, 144], ['null', 156, 98, 138], ['null', 156, 98, 133], ['null', 156, 98, 127], ['null', 156, 98, 121], ['null', 156, 98, 116], ['null', 156, 98, 110], ['null', 156, 98, 104], [360.0, 156, 98, 98]];
fomcolourgradvalarray[39] = [[0.0, 153, 101, 101], ['null', 153, 106, 101], ['null', 153, 111, 101], ['null', 153, 117, 101], ['null', 153, 122, 101], ['null', 153, 127, 101], ['null', 153, 132, 101], ['null', 153, 137, 101], ['null', 153, 143, 101], ['null', 153, 148, 101], [60.0, 153, 153, 101], ['null', 148, 153, 101], ['null', 143, 153, 101], ['null', 137, 153, 101], ['null', 132, 153, 101], ['null', 127, 153, 101], ['null', 122, 153, 101], ['null', 117, 153, 101], ['null', 111, 153, 101], ['null', 106, 153, 101], [120.0, 101, 153, 101], ['null', 101, 153, 106], ['null', 101, 153, 111], ['null', 101, 153, 117], ['null', 101, 153, 122], ['null', 101, 153, 127], ['null', 101, 153, 132], ['null', 101, 153, 137], ['null', 101, 153, 143], ['null', 101, 153, 148], [180.0, 101, 153, 153], ['null', 101, 148, 153], ['null', 101, 143, 153], ['null', 101, 137, 153], ['null', 101, 132, 153], ['null', 101, 127, 153], ['null', 101, 122, 153], ['null', 101, 117, 153], ['null', 101, 111, 153], ['null', 101, 106, 153], [240.0, 101, 101, 153], ['null', 106, 101, 153], ['null', 111, 101, 153], ['null', 117, 101, 153], ['null', 122, 101, 153], ['null', 127, 101, 153], ['null', 132, 101, 153], ['null', 137, 101, 153], ['null', 143, 101, 153], ['null', 148, 101, 153], [300.0, 153, 101, 153], ['null', 153, 101, 148], ['null', 153, 101, 143], ['null', 153, 101, 137], ['null', 153, 101, 132], ['null', 153, 101, 127], ['null', 153, 101, 122], ['null', 153, 101, 117], ['null', 153, 101, 111], ['null', 153, 101, 106], [360.0, 153, 101, 101]];
fomcolourgradvalarray[40] = [[0.0, 150, 104, 104], ['null', 150, 108, 104], ['null', 150, 113, 104], ['null', 150, 118, 104], ['null', 150, 122, 104], ['null', 150, 127, 104], ['null', 150, 132, 104], ['null', 150, 136, 104], ['null', 150, 141, 104], ['null', 150, 146, 104], [60.0, 150, 150, 104], ['null', 146, 150, 104], ['null', 141, 150, 104], ['null', 136, 150, 104], ['null', 132, 150, 104], ['null', 127, 150, 104], ['null', 122, 150, 104], ['null', 118, 150, 104], ['null', 113, 150, 104], ['null', 108, 150, 104], [120.0, 104, 150, 104], ['null', 104, 150, 108], ['null', 104, 150, 113], ['null', 104, 150, 118], ['null', 104, 150, 122], ['null', 104, 150, 127], ['null', 104, 150, 132], ['null', 104, 150, 136], ['null', 104, 150, 141], ['null', 104, 150, 146], [180.0, 104, 150, 150], ['null', 104, 146, 150], ['null', 104, 141, 150], ['null', 104, 136, 150], ['null', 104, 132, 150], ['null', 104, 127, 150], ['null', 104, 122, 150], ['null', 104, 118, 150], ['null', 104, 113, 150], ['null', 104, 108, 150], [240.0, 104, 104, 150], ['null', 108, 104, 150], ['null', 113, 104, 150], ['null', 118, 104, 150], ['null', 122, 104, 150], ['null', 127, 104, 150], ['null', 132, 104, 150], ['null', 136, 104, 150], ['null', 141, 104, 150], ['null', 146, 104, 150], [300.0, 150, 104, 150], ['null', 150, 104, 146], ['null', 150, 104, 141], ['null', 150, 104, 136], ['null', 150, 104, 132], ['null', 150, 104, 127], ['null', 150, 104, 122], ['null', 150, 104, 118], ['null', 150, 104, 113], ['null', 150, 104, 108], [360.0, 150, 104, 104]];
fomcolourgradvalarray[41] = [[0.0, 148, 106, 106], ['null', 148, 110, 106], ['null', 148, 115, 106], ['null', 148, 119, 106], ['null', 148, 123, 106], ['null', 148, 127, 106], ['null', 148, 131, 106], ['null', 148, 135, 106], ['null', 148, 139, 106], ['null', 148, 144, 106], [60.0, 148, 148, 106], ['null', 144, 148, 106], ['null', 139, 148, 106], ['null', 135, 148, 106], ['null', 131, 148, 106], ['null', 127, 148, 106], ['null', 123, 148, 106], ['null', 119, 148, 106], ['null', 115, 148, 106], ['null', 110, 148, 106], [120.0, 106, 148, 106], ['null', 106, 148, 110], ['null', 106, 148, 115], ['null', 106, 148, 119], ['null', 106, 148, 123], ['null', 106, 148, 127], ['null', 106, 148, 131], ['null', 106, 148, 135], ['null', 106, 148, 139], ['null', 106, 148, 144], [180.0, 106, 148, 148], ['null', 106, 144, 148], ['null', 106, 139, 148], ['null', 106, 135, 148], ['null', 106, 131, 148], ['null', 106, 127, 148], ['null', 106, 123, 148], ['null', 106, 119, 148], ['null', 106, 115, 148], ['null', 106, 110, 148], [240.0, 106, 106, 148], ['null', 110, 106, 148], ['null', 115, 106, 148], ['null', 119, 106, 148], ['null', 123, 106, 148], ['null', 127, 106, 148], ['null', 131, 106, 148], ['null', 135, 106, 148], ['null', 139, 106, 148], ['null', 144, 106, 148], [300.0, 148, 106, 148], ['null', 148, 106, 144], ['null', 148, 106, 139], ['null', 148, 106, 135], ['null', 148, 106, 131], ['null', 148, 106, 127], ['null', 148, 106, 123], ['null', 148, 106, 119], ['null', 148, 106, 115], ['null', 148, 106, 110], [360.0, 148, 106, 106]];
fomcolourgradvalarray[42] = [[0.0, 145, 109, 109], ['null', 145, 112, 109], ['null', 145, 116, 109], ['null', 145, 120, 109], ['null', 145, 123, 109], ['null', 145, 127, 109], ['null', 145, 131, 109], ['null', 145, 134, 109], ['null', 145, 138, 109], ['null', 145, 142, 109], [60.0, 145, 145, 109], ['null', 142, 145, 109], ['null', 138, 145, 109], ['null', 134, 145, 109], ['null', 131, 145, 109], ['null', 127, 145, 109], ['null', 123, 145, 109], ['null', 120, 145, 109], ['null', 116, 145, 109], ['null', 112, 145, 109], [120.0, 109, 145, 109], ['null', 109, 145, 112], ['null', 109, 145, 116], ['null', 109, 145, 120], ['null', 109, 145, 123], ['null', 109, 145, 127], ['null', 109, 145, 131], ['null', 109, 145, 134], ['null', 109, 145, 138], ['null', 109, 145, 142], [180.0, 109, 145, 145], ['null', 109, 142, 145], ['null', 109, 138, 145], ['null', 109, 134, 145], ['null', 109, 131, 145], ['null', 109, 127, 145], ['null', 109, 123, 145], ['null', 109, 120, 145], ['null', 109, 116, 145], ['null', 109, 112, 145], [240.0, 109, 109, 145], ['null', 112, 109, 145], ['null', 116, 109, 145], ['null', 120, 109, 145], ['null', 123, 109, 145], ['null', 127, 109, 145], ['null', 131, 109, 145], ['null', 134, 109, 145], ['null', 138, 109, 145], ['null', 142, 109, 145], [300.0, 145, 109, 145], ['null', 145, 109, 142], ['null', 145, 109, 138], ['null', 145, 109, 134], ['null', 145, 109, 131], ['null', 145, 109, 127], ['null', 145, 109, 123], ['null', 145, 109, 120], ['null', 145, 109, 116], ['null', 145, 109, 112], [360.0, 145, 109, 109]];
fomcolourgradvalarray[43] = [[0.0, 143, 111, 111], ['null', 143, 115, 111], ['null', 143, 118, 111], ['null', 143, 121, 111], ['null', 143, 124, 111], ['null', 143, 127, 111], ['null', 143, 130, 111], ['null', 143, 133, 111], ['null', 143, 136, 111], ['null', 143, 139, 111], [60.0, 143, 143, 111], ['null', 139, 143, 111], ['null', 136, 143, 111], ['null', 133, 143, 111], ['null', 130, 143, 111], ['null', 127, 143, 111], ['null', 124, 143, 111], ['null', 121, 143, 111], ['null', 118, 143, 111], ['null', 115, 143, 111], [120.0, 111, 143, 111], ['null', 111, 143, 115], ['null', 111, 143, 118], ['null', 111, 143, 121], ['null', 111, 143, 124], ['null', 111, 143, 127], ['null', 111, 143, 130], ['null', 111, 143, 133], ['null', 111, 143, 136], ['null', 111, 143, 139], [180.0, 111, 143, 143], ['null', 111, 139, 143], ['null', 111, 136, 143], ['null', 111, 133, 143], ['null', 111, 130, 143], ['null', 111, 127, 143], ['null', 111, 124, 143], ['null', 111, 121, 143], ['null', 111, 118, 143], ['null', 111, 115, 143], [240.0, 111, 111, 143], ['null', 115, 111, 143], ['null', 118, 111, 143], ['null', 121, 111, 143], ['null', 124, 111, 143], ['null', 127, 111, 143], ['null', 130, 111, 143], ['null', 133, 111, 143], ['null', 136, 111, 143], ['null', 139, 111, 143], [300.0, 143, 111, 143], ['null', 143, 111, 139], ['null', 143, 111, 136], ['null', 143, 111, 133], ['null', 143, 111, 130], ['null', 143, 111, 127], ['null', 143, 111, 124], ['null', 143, 111, 121], ['null', 143, 111, 118], ['null', 143, 111, 115], [360.0, 143, 111, 111]];
fomcolourgradvalarray[44] = [[0.0, 140, 114, 114], ['null', 140, 117, 114], ['null', 140, 119, 114], ['null', 140, 122, 114], ['null', 140, 124, 114], ['null', 140, 127, 114], ['null', 140, 130, 114], ['null', 140, 132, 114], ['null', 140, 135, 114], ['null', 140, 137, 114], [60.0, 140, 140, 114], ['null', 137, 140, 114], ['null', 135, 140, 114], ['null', 132, 140, 114], ['null', 130, 140, 114], ['null', 127, 140, 114], ['null', 124, 140, 114], ['null', 122, 140, 114], ['null', 119, 140, 114], ['null', 117, 140, 114], [120.0, 114, 140, 114], ['null', 114, 140, 117], ['null', 114, 140, 119], ['null', 114, 140, 122], ['null', 114, 140, 124], ['null', 114, 140, 127], ['null', 114, 140, 130], ['null', 114, 140, 132], ['null', 114, 140, 135], ['null', 114, 140, 137], [180.0, 114, 140, 140], ['null', 114, 137, 140], ['null', 114, 135, 140], ['null', 114, 132, 140], ['null', 114, 130, 140], ['null', 114, 127, 140], ['null', 114, 124, 140], ['null', 114, 122, 140], ['null', 114, 119, 140], ['null', 114, 117, 140], [240.0, 114, 114, 140], ['null', 117, 114, 140], ['null', 119, 114, 140], ['null', 122, 114, 140], ['null', 124, 114, 140], ['null', 127, 114, 140], ['null', 130, 114, 140], ['null', 132, 114, 140], ['null', 135, 114, 140], ['null', 137, 114, 140], [300.0, 140, 114, 140], ['null', 140, 114, 137], ['null', 140, 114, 135], ['null', 140, 114, 132], ['null', 140, 114, 130], ['null', 140, 114, 127], ['null', 140, 114, 124], ['null', 140, 114, 122], ['null', 140, 114, 119], ['null', 140, 114, 117], [360.0, 140, 114, 114]];
fomcolourgradvalarray[45] = [[0.0, 137, 117, 117], ['null', 137, 119, 117], ['null', 137, 121, 117], ['null', 137, 123, 117], ['null', 137, 125, 117], ['null', 137, 127, 117], ['null', 137, 129, 117], ['null', 137, 131, 117], ['null', 137, 133, 117], ['null', 137, 135, 117], [60.0, 137, 137, 117], ['null', 135, 137, 117], ['null', 133, 137, 117], ['null', 131, 137, 117], ['null', 129, 137, 117], ['null', 127, 137, 117], ['null', 125, 137, 117], ['null', 123, 137, 117], ['null', 121, 137, 117], ['null', 119, 137, 117], [120.0, 117, 137, 117], ['null', 117, 137, 119], ['null', 117, 137, 121], ['null', 117, 137, 123], ['null', 117, 137, 125], ['null', 117, 137, 127], ['null', 117, 137, 129], ['null', 117, 137, 131], ['null', 117, 137, 133], ['null', 117, 137, 135], [180.0, 117, 137, 137], ['null', 117, 135, 137], ['null', 117, 133, 137], ['null', 117, 131, 137], ['null', 117, 129, 137], ['null', 117, 127, 137], ['null', 117, 125, 137], ['null', 117, 123, 137], ['null', 117, 121, 137], ['null', 117, 119, 137], [240.0, 117, 117, 137], ['null', 119, 117, 137], ['null', 121, 117, 137], ['null', 123, 117, 137], ['null', 125, 117, 137], ['null', 127, 117, 137], ['null', 129, 117, 137], ['null', 131, 117, 137], ['null', 133, 117, 137], ['null', 135, 117, 137], [300.0, 137, 117, 137], ['null', 137, 117, 135], ['null', 137, 117, 133], ['null', 137, 117, 131], ['null', 137, 117, 129], ['null', 137, 117, 127], ['null', 137, 117, 125], ['null', 137, 117, 123], ['null', 137, 117, 121], ['null', 137, 117, 119], [360.0, 137, 117, 117]];
fomcolourgradvalarray[46] = [[0.0, 135, 119, 119], ['null', 135, 121, 119], ['null', 135, 122, 119], ['null', 135, 124, 119], ['null', 135, 125, 119], ['null', 135, 127, 119], ['null', 135, 129, 119], ['null', 135, 130, 119], ['null', 135, 132, 119], ['null', 135, 133, 119], [60.0, 135, 135, 119], ['null', 133, 135, 119], ['null', 132, 135, 119], ['null', 130, 135, 119], ['null', 129, 135, 119], ['null', 127, 135, 119], ['null', 125, 135, 119], ['null', 124, 135, 119], ['null', 122, 135, 119], ['null', 121, 135, 119], [120.0, 119, 135, 119], ['null', 119, 135, 121], ['null', 119, 135, 122], ['null', 119, 135, 124], ['null', 119, 135, 125], ['null', 119, 135, 127], ['null', 119, 135, 129], ['null', 119, 135, 130], ['null', 119, 135, 132], ['null', 119, 135, 133], [180.0, 119, 135, 135], ['null', 119, 133, 135], ['null', 119, 132, 135], ['null', 119, 130, 135], ['null', 119, 129, 135], ['null', 119, 127, 135], ['null', 119, 125, 135], ['null', 119, 124, 135], ['null', 119, 122, 135], ['null', 119, 121, 135], [240.0, 119, 119, 135], ['null', 121, 119, 135], ['null', 122, 119, 135], ['null', 124, 119, 135], ['null', 125, 119, 135], ['null', 127, 119, 135], ['null', 129, 119, 135], ['null', 130, 119, 135], ['null', 132, 119, 135], ['null', 133, 119, 135], [300.0, 135, 119, 135], ['null', 135, 119, 133], ['null', 135, 119, 132], ['null', 135, 119, 130], ['null', 135, 119, 129], ['null', 135, 119, 127], ['null', 135, 119, 125], ['null', 135, 119, 124], ['null', 135, 119, 122], ['null', 135, 119, 121], [360.0, 135, 119, 119]];
fomcolourgradvalarray[47] = [[0.0, 132, 122, 122], ['null', 132, 123, 122], ['null', 132, 124, 122], ['null', 132, 125, 122], ['null', 132, 126, 122], ['null', 132, 127, 122], ['null', 132, 128, 122], ['null', 132, 129, 122], ['null', 132, 130, 122], ['null', 132, 131, 122], [60.0, 132, 132, 122], ['null', 131, 132, 122], ['null', 130, 132, 122], ['null', 129, 132, 122], ['null', 128, 132, 122], ['null', 127, 132, 122], ['null', 126, 132, 122], ['null', 125, 132, 122], ['null', 124, 132, 122], ['null', 123, 132, 122], [120.0, 122, 132, 122], ['null', 122, 132, 123], ['null', 122, 132, 124], ['null', 122, 132, 125], ['null', 122, 132, 126], ['null', 122, 132, 127], ['null', 122, 132, 128], ['null', 122, 132, 129], ['null', 122, 132, 130], ['null', 122, 132, 131], [180.0, 122, 132, 132], ['null', 122, 131, 132], ['null', 122, 130, 132], ['null', 122, 129, 132], ['null', 122, 128, 132], ['null', 122, 127, 132], ['null', 122, 126, 132], ['null', 122, 125, 132], ['null', 122, 124, 132], ['null', 122, 123, 132], [240.0, 122, 122, 132], ['null', 123, 122, 132], ['null', 124, 122, 132], ['null', 125, 122, 132], ['null', 126, 122, 132], ['null', 127, 122, 132], ['null', 128, 122, 132], ['null', 129, 122, 132], ['null', 130, 122, 132], ['null', 131, 122, 132], [300.0, 132, 122, 132], ['null', 132, 122, 131], ['null', 132, 122, 130], ['null', 132, 122, 129], ['null', 132, 122, 128], ['null', 132, 122, 127], ['null', 132, 122, 126], ['null', 132, 122, 125], ['null', 132, 122, 124], ['null', 132, 122, 123], [360.0, 132, 122, 122]];
fomcolourgradvalarray[48] = [[0.0, 130, 124, 124], ['null', 130, 125, 124], ['null', 130, 125, 124], ['null', 130, 126, 124], ['null', 130, 126, 124], ['null', 130, 127, 124], ['null', 130, 128, 124], ['null', 130, 128, 124], ['null', 130, 129, 124], ['null', 130, 129, 124], [60.0, 130, 130, 124], ['null', 129, 130, 124], ['null', 129, 130, 124], ['null', 128, 130, 124], ['null', 128, 130, 124], ['null', 127, 130, 124], ['null', 126, 130, 124], ['null', 126, 130, 124], ['null', 125, 130, 124], ['null', 125, 130, 124], [120.0, 124, 130, 124], ['null', 124, 130, 125], ['null', 124, 130, 125], ['null', 124, 130, 126], ['null', 124, 130, 126], ['null', 124, 130, 127], ['null', 124, 130, 128], ['null', 124, 130, 128], ['null', 124, 130, 129], ['null', 124, 130, 129], [180.0, 124, 130, 130], ['null', 124, 129, 130], ['null', 124, 129, 130], ['null', 124, 128, 130], ['null', 124, 128, 130], ['null', 124, 127, 130], ['null', 124, 126, 130], ['null', 124, 126, 130], ['null', 124, 125, 130], ['null', 124, 125, 130], [240.0, 124, 124, 130], ['null', 125, 124, 130], ['null', 125, 124, 130], ['null', 126, 124, 130], ['null', 126, 124, 130], ['null', 127, 124, 130], ['null', 128, 124, 130], ['null', 128, 124, 130], ['null', 129, 124, 130], ['null', 129, 124, 130], [300.0, 130, 124, 130], ['null', 130, 124, 129], ['null', 130, 124, 129], ['null', 130, 124, 128], ['null', 130, 124, 128], ['null', 130, 124, 127], ['null', 130, 124, 126], ['null', 130, 124, 126], ['null', 130, 124, 125], ['null', 130, 124, 125], [360.0, 130, 124, 124]];
fomcolourgradvalarray[49] = [[0.0, 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], [60.0, 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], [120.0, 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], [180.0, 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], [240.0, 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], [300.0, 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], ['null', 127, 127, 127], [360.0, 127, 127, 127]];



function ColourChart(ctop, cleft, millerlabel, fomlabel, colourgradvalarray)
{
  var ih = 3,
  topr = 25,
  topr2 = 0,
  lp = 10;
  stage.viewer.container.children = "";
  if (fomlabel != "" )
    colourgradvalarray = fomcolourgradvalarray;

  var maxnumberwidth = 0;
  for (j = 0; j < colourgradvalarray[0].length; j++)
  {
    val = colourgradvalarray[0][j][0];
    maxnumberwidth = Math.max( getTextWidth(val, fontsize), maxnumberwidth );
  }
  wp = maxnumberwidth + 5,
  //wp = 60,
  lp2 = lp + wp,
  gl = 3,
  wp2 = gl,
  fomlabelheight = 25;

  if (colourgradvalarray.length === 1)
  {
    wp2 = 15;
    fomlabelheight = 0;
  }
  var wp3 = wp + colourgradvalarray.length * wp2 + 2;

  totalheight = ih*colourgradvalarray[0].length + 35 + fomlabelheight;

  if (container != null)
    container.remove();
  container = addDivBox(null, ctop, cleft, wp3, totalheight, bgcolour="rgba(255, 255, 255, 1.0)");

  // make a white box on top of which boxes with transparent background are placed
  // containing the colour values at regular intervals as well as label legend of
  // the displayed miller array
  addDiv2Container(container, null, topr2, lp, wp3, totalheight, 'rgba(255, 255, 255, 1.0)');

  // print label of the miller array used for colouring
  lblwidth = getTextWidth(millerlabel, fontsize);
  addDiv2Container(container, millerlabel, topr2, lp, lblwidth + 5, 20, 'rgba(255, 255, 255, 1.0)', fsize=fontsize);

  if (fomlabel != "" )
  {
    // print FOM label, 1, 0.5 and 0.0 values below colour chart
    fomtop = topr2 + totalheight - 18;
    fomlp = lp + wp;
    fomwp = wp3;
    fomtop2 = fomtop - 13;
    // print the 1 number
    addDiv2Container(container, 1, fomtop2, fomlp, fomwp, 20, 'rgba(255, 255, 255, 0.0)', fsize=fontsize);
    // print the 0.5 number
    leftp = fomlp + 0.48 * gl * colourgradvalarray.length;
    addDiv2Container(container, 0.5, fomtop2, leftp, fomwp, 20, 'rgba(255, 255, 255, 0.0)', fsize=fontsize);
    // print the FOM label
    addDiv2Container(container, fomlabel, fomtop, fomlp, fomwp, 20, 'rgba(255, 255, 255, 0.0)', fsize=fontsize);
    // print the 0 number
    leftp = fomlp + 0.96 * gl * colourgradvalarray.length;
    addDiv2Container(container, 0, fomtop2, leftp, fomwp, 20, 'rgba(255, 255, 255, 0.0)', fsize=fontsize);
  }

  for (j = 0; j < colourgradvalarray[0].length; j++)
  {
    val = colourgradvalarray[0][j][0];
    topv = j*ih + topr;
    toptxt = topv - 5;
    // print value of miller array if present in colourgradvalarray[0][j][0]
    addDiv2Container(container,val, toptxt, lp, wp, ih, 'rgba(255, 255, 255, 0.0)', fsize=fontsize);
  }

  // draw the colour gradient
  for (g = 0; g < colourgradvalarray.length; g++)
  {
    leftp = g*gl + lp + wp;
    // if FOM values are supplied draw colour gradients with decreasing
    // saturation values as stored in the colourgradvalarray[g] arrays
    for (j = 0; j < colourgradvalarray[g].length; j++)
    {
      R = colourgradvalarray[g][j][1];
      G = colourgradvalarray[g][j][2];
      B = colourgradvalarray[g][j][3];
      //A = colourgradvalarray[g][j][4];
      rgbcol = 'rgba(' + R.toString() + ',' + G.toString() + ',' + B.toString() + ', 1.0)'

      //val = colourgradvalarray[g][j][0];
      topv = j*ih + topr;
      addDiv2Container(container, null, topv, leftp, wp2, ih, rgbcol);
    }
  }
}



function AddSpheresBin2ShapeBuffer(coordarray, colourarray, radiiarray, ttipids) 
{
  ttiplst = [-1].concat(ttipids);
  ttips.push( { ids: ttiplst,
       getPosition: function() { return { x:0, y:0 }; } // dummy function to avoid crash
  }  );
  positions.push( new Float32Array( coordarray ) );
  colours.push( new Float32Array( colourarray ) );
  radii.push( new Float32Array( radiiarray ) );
  curridx = positions.length -1;
  shapebufs.push( new NGL.SphereBuffer({
    position: positions[curridx],
    color: colours[curridx], 
    radius: radii[curridx],
    picking: ttips[curridx],
    })
  );
  shape.addBuffer(shapebufs[curridx]);
  alphas.push(1.0);
}


function HKLscene()
{
  shape = new NGL.Shape('shape');
  stage = new NGL.Stage('viewport', {  backgroundColor: "rgb(128, 128, 128)",
                                      tooltip:false, // create our own tooltip from a div element
                                      fogNear: 100, fogFar: 100 });
  stage.setParameters( { cameraType: camtype } );

  MakeHKL_Axis(shape);

//  placeholder for spherebufferstr
  

// create tooltip element and add to the viewer canvas
  stage.viewer.container.appendChild(tooltip);

  stage.signals.clicked.add(
    PickingProxyfunc
  );


  stage.mouseObserver.signals.dragged.add(
    function ( deltaX, deltaY)
    {
      if (clipFixToCamPosZ === true)
      {
        stage.viewer.parameters.clipNear = origclipnear + (origcameraZpos -stage.viewer.camera.position.z);
        stage.viewer.parameters.clipFar = origclipfar + (origcameraZpos -stage.viewer.camera.position.z);
        stage.viewer.requestRender();
      }
      msg = getOrientMsg();
      rightnow = timefunc();
      if (rightnow - timenow > 250)
      { // only post every 250 milli second as not to overwhelm python
        postrotmxflag = true;
        WebsockSendMsg('CurrentViewOrientation:\\n' + msg );
        timenow = timefunc();
      }
    }
  );


  stage.mouseObserver.signals.clicked.add(
    function (x, y)
    {
      msg = getOrientMsg();
      WebsockSendMsg('CurrentViewOrientation:\\n' + msg );
    }
  );


  stage.mouseObserver.signals.scrolled.add(
    function (delta)
    {
      if (clipFixToCamPosZ === true)
      {
        stage.viewer.parameters.clipNear = origclipnear + (origcameraZpos -stage.viewer.camera.position.z);
        stage.viewer.parameters.clipFar = origclipfar + (origcameraZpos -stage.viewer.camera.position.z);
        stage.viewer.requestRender();
      }
      msg = getOrientMsg();
      rightnow = timefunc();
      if (rightnow - timenow > 250)
      { // only post every 250 milli second as not to overwhelm python
        WebsockSendMsg('CurrentViewOrientation:\\n' + msg );
        timenow = timefunc();
      }
    }
  );


  stage.viewer.signals.rendered.add(
    function()
    {
      if (postrotmxflag === true)
      {
        msg = getOrientMsg();
        WebsockSendMsg('CurrentViewOrientation:\\n' + msg );
        postrotmxflag = false;
      }
    }
  );


  stage.viewerControls.signals.changed.add(
    function()
    {
      msg = getOrientMsg();
      rightnow = timefunc();
      if (rightnow - timenow > 250)
      { // only post every 250 milli second as not to overwhelm python
        WebsockSendMsg('CurrentViewOrientation:\\n' + msg );
        //ReturnClipPlaneDistances();
        sleep(250).then(()=> {
            ReturnClipPlaneDistances();
          }
        );
        timenow = timefunc();
      }
    }
  );

  shapeComp = stage.addComponentFromObject(shape);
  repr = shapeComp.addRepresentation('buffer');
  shapeComp.autoView();
  repr.update();

  // if some radii are negative draw them with wireframe
  %s

  if (isdebug)
    stage.viewer.container.appendChild(debugmessage);

  // avoid NGL zoomFocus messing up clipplanes positions. So reassign those signals to zoomDrag
  stage.mouseControls.remove("drag-shift-right");
  stage.mouseControls.add("drag-shift-right", NGL.MouseActions.zoomDrag);
  stage.mouseControls.remove("drag-middle");
  stage.mouseControls.add("drag-middle", NGL.MouseActions.zoomDrag);
  stage.mouseControls.remove('clickPick-left'); // avoid undefined move-pick when clicking on a sphere

  stage.viewer.requestRender();
  if (isdebug)
    debugmessage.innerText = dbgmsg;
}


function OnUpdateOrientation()
{
  msg = getOrientMsg();
  WebsockSendMsg('MouseMovedOrientation:\\n' + msg );
}


try
{
  document.addEventListener('DOMContentLoaded', function() { HKLscene() }, false );
  document.addEventListener('mouseup', function() { OnUpdateOrientation() }, false );
  document.addEventListener('wheel', function(e) { OnUpdateOrientation() }, false );
  document.addEventListener('scroll', function(e) { OnUpdateOrientation() }, false );
  // mitigate flickering on some PCs when resizing
  document.addEventListener('resize', function() { RenderRequest() }, false );
}
catch(err)
{
  WebsockSendMsg('JavaScriptError: ' + err.stack );
}

    """


def imgPy2orPy3savestr():
  # Using websocket_server in python2 which doesn't allow streaming large compressed data
  # So use NGL's download image function
  mstr = """
              NGL.download( blob, filename );
    """
  if sys.version_info[0] > 2: # Using websockets in python3 which supports streaming large blobs
    mstr = """
              WebsockSendMsg('Imageblob', false);
              WebsockSendMsg( blob );
    """
  return mstr


WebsockMsgHandlestr = """

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


function createElement(name, properties, style, fsize=10)
{
// utility function used in for loop over colourgradvalarray
  var el = document.createElement(name);
  Object.assign(el, properties);
  Object.assign(el.style, style);
  Object.assign(el.style,
  {
    display: "block",
    position: "absolute",
    fontFamily: "sans-serif",
    fontSize: fsize.toString() + "pt",
  }
  );
  return el;
}


function addElement(el)
{
// utility function used in for loop over colourgradvalarray
  Object.assign(el.style,
  {
    position: "absolute",
    zIndex: 10
  }
  );
  stage.viewer.container.appendChild(el);
}


function addDivBox(name, t, l, w, h, bgcolour="rgba(255, 255, 255, 0.0)", fsize=10)
{
  if (name != null && name != "null")
    txt = name.toString();
  else
    txt = "";

  divbox = createElement("div",
  {
    innerText: txt
  },
  {
    backgroundColor: bgcolour,
    color:  "rgba(0, 0, 0, 1.0)",
    top: t.toString() + "px",
    left: l.toString() + "px",
    width: w.toString() + "px",
    height: h.toString() + "px",
  },
  fsize
  );
  addElement(divbox);
  return divbox;
}


function addDiv2Container(container, name, t, l, w, h, bgcolour="rgba(255, 255, 255, 0.0)", fsize=10)
{
  divbox = addDivBox(name, t, l, w, h, bgcolour, fsize)
  container.append( divbox );
}


// Microsoft Edge users follow instructions on
// https://stackoverflow.com/questions/31772564/websocket-to-localhost-not-working-on-microsoft-edge
// to enable websocket connection

var pagename = location.pathname.substring(1);
var mysocket;
var socket_intentionally_closed = false;

function CreateWebSocket()
{
  try
  {
    mysocket = new WebSocket('ws://127.0.0.1:%s/');
    mysocket.bufferType = "arraybuffer"; // "blob";
    //if (mysocket.readyState !== mysocket.OPEN)
    //  alert('Cannot connect to websocket server! \\nAre the firewall permissions or browser security too strict?');
    //  socket_intentionally_closed = false;
    mysocket.onerror = function(e) { onError(e)  };
    mysocket.onopen = function(e) { onOpen(e)  };
    mysocket.onclose = function(e) { onClose(e)  };
    mysocket.onmessage = function(e) { onMessage(e)  };

  }
  catch(err)
  {
    alert('JavaScriptError: ' + err.stack );
    addDivBox("Error!", window.innerHeight - 50, 20, 40, 20, rgba(100, 100, 100, 0.0));
  }
}


CreateWebSocket();

var stage = null;
var shape;
var shapeComp;
var vectorshape = null;
var repr;
var AA = String.fromCharCode(197); // short for angstrom
var DGR = String.fromCharCode(176); // short for degree symbol
var current_ttip = "";
var ttips = [];
var vectorreprs = [];
var vectorshapeComps = [];
var positions = [];
var br_positions = [];
var br_colours = [];
var br_radii = [];
var br_ttips = [];
var colours = [];
var alphas = [];
var radii = [];
var shapebufs = [];
var br_shapebufs = [];
var nrots = 0;
var postrotmxflag = false;
var cvorient = new NGL.Matrix4();
var oldmsg = "";
var clipFixToCamPosZ = false;
var origclipnear;
var origclipfar;
var origcameraZpos;
var nbins = %s;
var rerendered = false;
var expstate = "";
var current_ttip_ids;
var isdebug = %s;
var tdelay = 100;
var displaytooltips = true;
var container = null;

var sockwaitcount = 0;


function RemoveStageObjects()
{
  // delete the shapebufs[] that holds the positions[] arrays
  shapeComp.removeRepresentation(repr);
  // remove shapecomp from stage first
  stage.removeAllComponents();
  ttips = [];
  vectorreprs = [];
  vectorshapeComps = [];
  positions = [];
  br_positions = [];
  br_colours = [];
  br_radii = [];
  br_ttips = [];
  colours = [];
  alphas = [];
  radii = [];
  shapebufs = [];
  br_shapebufs = [];
  shapeComp = null;
  vectorshape = null;
  repr = null;
}


function WebsockSendMsg(msg, message_is_complete = true)
{
  try
  {
    if (socket_intentionally_closed == true)
      return;
    // Avoid "WebSocket is already in CLOSING or CLOSED state" errors when using QWebEngineView
    // See https://stackoverflow.com/questions/48472977/how-to-catch-and-deal-with-websocket-is-already-in-closing-or-closed-state-in

    if (mysocket.readyState === mysocket.CONNECTING )
    {
      sleep(50).then(()=> {
         WebsockSendMsg(msg);
          return;
        }
      );
    }

    if (mysocket.readyState === mysocket.OPEN)
    {
      mysocket.send(msg);
      if (message_is_complete == true)
        mysocket.send( 'Ready ' + pagename + '\\n' );
    }
    else
      if (mysocket.readyState !== mysocket.CONNECTING)
      {
        sleep(200).then(()=> {
            if (mysocket.readyState !== mysocket.OPEN )
            {
              //alert('Closing socket');
              mysocket.close(4242, 'Refreshing ' + pagename); // not sure this is ever received by server
              //window.location.reload(true);
              //alert('Creating socket');
              CreateWebSocket();
              WebsockSendMsg('Connection lost and reestablished')
              WebsockSendMsg(msg);
            }
            return;
          }
        );
        //alert('Cannot send data! \\nAre the firewall permissions or browser security too strict?');
      }
  }
  catch(err)
  {
    alert('JavaScriptError: ' + err.stack );
    addDivBox("Error!", window.innerHeight - 50, 20, 40, 20, rgba(100, 100, 100, 0.0));
  }
}


var dbgmsg = "";
// debug message window
var debugmessage = document.createElement("div");
Object.assign(debugmessage.style, {
  position: "absolute",
  zIndex: 10,
  pointerEvents: "none",
  backgroundColor: "rgba(255, 255, 255, 0.8 )",
  color: "black",
  padding: "0.1em",
  fontFamily: "sans-serif",
  bottom: "10px",
  left: "10px",
  fontSize: "smaller",
  display: "block"
});



function ReturnClipPlaneDistances()
{
  if (stage.viewer.parameters.clipScale == 'relative')
    cameradist = stage.viewer.cDist;
  if (stage.viewer.parameters.clipScale == 'absolute')
    if (stage.viewer.cDist != 0
         && stage.viewer.parameters.clipFar > stage.viewer.cDist
         && stage.viewer.cDist > stage.viewer.parameters.clipNear)
      cameradist = stage.viewer.cDist;
    else if (stage.viewer.camera.position.z != 0
         && stage.viewer.parameters.clipFar > -stage.viewer.camera.position.z
         && -stage.viewer.camera.position.z > stage.viewer.parameters.clipNear)
      cameradist = stage.viewer.camera.position.z;
    else if (stage.viewer.camera.position.z == -stage.viewer.cDist)
      cameradist = stage.viewer.cDist;
    else
      return;

  msg = String( [stage.viewer.parameters.clipNear,
                  stage.viewer.parameters.clipFar,
                  cameradist ] )
  WebsockSendMsg('ReturnClipPlaneDistances:\\n' + msg );
}


async function RenderRequest()
{
  await sleep(100);
  stage.viewer.requestRender();
  WebsockSendMsg( 'RenderRequest ' + pagename );
}

// Log errors to debugger of your browser
function onError(e)
{
  msg = 'WebSocket Error ' + e;
  console.log(msg);
  dbgmsg =msg;
};


function onOpen(e)
{
  msg = '%s now connected via websocket to ' + pagename + '\\n';
  WebsockSendMsg(msg);
  dbgmsg =msg;
  rerendered = false;
};


function onClose(e)
{
  msg = '%s now disconnecting from websocket ' + pagename + '\\n';
  console.log(msg);
  dbgmsg =msg;
};


function onMessage(e)
{
  var c,
  si;
  WebsockSendMsg('\\n    Browser: Got ' + e.data ); // tell server what it sent us
  try
  {
    var datval = e.data.split(":\\n");
    var msgtype = datval[0];
    var val = datval[1].split(",");

    if (msgtype === "Reload")
    {
    // refresh browser with the javascript file
      if (stage != null)
      {
        msg = getOrientMsg();
        WebsockSendMsg('OrientationBeforeReload:\\n' + msg );
      }
      WebsockSendMsg( 'Refreshing ' + pagename );

      sleep(200).then(()=> {
          socket_intentionally_closed = true;
          mysocket.close(4242, 'Refreshing ' + pagename);
          window.location.reload(true);
          // In 200ms we are gone. A new javascript file will be loaded in the browser
        }
      );
    }

    if (stage == null) // everything below assumes stage!=null
      return;

    if (msgtype === "alpha")
    {
      bin = parseInt(val[0]);
      if (bin < shapebufs.length)
      {
        alphas[bin] = parseFloat(val[1]);
        shapebufs[bin].setParameters({opacity: alphas[bin]});
        for (var g=0; g < nrots; g++ )
          br_shapebufs[bin][g].setParameters({opacity: alphas[bin]});
        //stage.viewer.requestRender();
        RenderRequest();
      }
    }

    if (msgtype === "colour")
    {
      bin = parseInt(val[0]);
      if (bin < shapebufs.length)
      {
        si =  parseInt(val[1]);
        colours[bin][3*si] = parseFloat(val[2]);
        colours[bin][3*si+1] = parseFloat(val[3]);
        colours[bin][3*si+2] = parseFloat(val[4]);
        shapebufs[bin].setAttributes({ color: colours[bin] });

        for (var g=0; g < nrots; g++ )
        {
          br_colours[bin][3*si] = parseFloat(val[2]);
          br_colours[bin][3*si+1] = parseFloat(val[3]);
          br_colours[bin][3*si+2] = parseFloat(val[4]);
          br_shapebufs[bin][g].setAttributes({ color: br_colours[bin] });
        }
        //stage.viewer.requestRender();
        RenderRequest();
      }
    }

    if (msgtype === "DisplayTooltips")
    {
      displaytooltips = val[0];
      stage.signals.hovered.removeAll();
      stage.signals.clicked.removeAll();
      if (displaytooltips == "click")
        stage.signals.clicked.add( PickingProxyfunc );
      if (displaytooltips == "hover")
        stage.signals.hovered.add( PickingProxyfunc );
    }

    if (msgtype === "ShowThisTooltip")
    {
      current_ttip = eval(datval[1]).split("\\n\\n")[0];
      current_ttip_ids = eval(datval[1]).split("\\n\\n")[1];
    }

    if (msgtype === "TooltipOpacity")
    {
      Object.assign(tooltip.style, {
        backgroundColor: "rgba(255, 255, 255, " + val[0] + " )",
      });
    }

    if (msgtype === "Redraw")
    {
      RenderRequest();
      WebsockSendMsg( 'Redrawing ' + pagename );
    }

    if (msgtype === "ReOrient")
    {
      WebsockSendMsg( 'Reorienting ' + pagename );
      sm = new Float32Array(16);
      for (j=0; j<16; j++)
      {
        sm[j] = parseFloat(val[j]);
        if (isNaN( sm[j] ))
          return; // do nothing just in case
      }

      var m = new NGL.Matrix4();
      m.fromArray(sm);
      stage.viewerControls.orient(m);
      //stage.viewer.renderer.setClearColor( 0xffffff, 0.01);
      //stage.viewer.requestRender();
      RenderRequest();
      msg = getOrientMsg();
      WebsockSendMsg('CurrentViewOrientation:\\n' + msg );
    }

    if (msgtype.includes("Expand") )
    {
      WebsockSendMsg( 'Expanding data...' );

      if (msgtype == "Expand" && expstate == "")
        return;

      if (msgtype == "ExpandP1" && expstate == "isP1Expanded")
        return;

      if (msgtype == "ExpandFriedel" && expstate == "isFriedelExpanded")
        return;

      if (msgtype == "ExpandP1Friedel" && expstate == "isP1FriedelExpanded")
        return;

      // delete the shapebufs[] that holds the positions[] arrays
      shapeComp.removeRepresentation(repr);
      // remove shapecomp from stage first
      stage.removeComponent(shapeComp);

      br_positions = [];
      br_colours = [];
      br_radii = [];
      br_ttips = [];
      br_shapebufs = [];
      var nexpandrefls = 0;

      //alert('rotations:\\n' + val);
      // Rotation matrices are concatenated to a string of floats
      // separated by line breaks between each roation matrix
      rotationstrs = datval[1].split("\\n");
      var Rotmats = [];
      var r = new NGL.Vector3();

      for (var rotmxidx=0; rotmxidx < rotationstrs.length; rotmxidx++ )
      {
        Rotmats.push( new NGL.Matrix3() );
        // convert string of rotation matrix elements into a Matrix3
        var elmstrs = rotationstrs[rotmxidx].split(",");
        for (j=0; j<9; j++)
          Rotmats[rotmxidx].elements[j] = parseFloat(elmstrs[j]);
      }

      var Imx = new NGL.Matrix3();
      Imx.identity(); // for testing
      if ( !(msgtype.includes("P1")) && rotationstrs.length == 1 && Rotmats[0].equals(Imx) )
        throw "Only the identity matrix is provided. That means no P1 expansion of reflections!";

      for (var bin=0; bin<nbins; bin++)
      {
        var nsize = positions[bin].length/3; // number of reflections in each bin
        var csize = nsize*3;
        var nsize3 = nsize*3;
        var anoexp = false;

        if (msgtype.includes("Friedel") )
        {
          anoexp = true;
          csize = nsize*6;
        }
        br_positions.push( [] );
        br_shapebufs.push( [] );
        br_colours.push( [] );
        br_radii.push( [] );
        br_ttips.push( [] );

        br_colours[bin] = colours[bin];
        br_radii[bin] = radii[bin];
        if (anoexp)
        {
          var colarr = [];
          var cl = colours[bin].length;
          for (var i=0; i<cl; i++)
          {
            colarr[i] = colours[bin][i];
            colarr[i+cl] = colours[bin][i];
          }
          br_colours[bin] = new Float32Array(colarr);

          var radiiarr = [];
          var rl = radii[bin].length;
          for (var i=0; i<rl; i++)
          {
            radiiarr[i] = radii[bin][i];
            radiiarr[i+rl] = radii[bin][i];
          }
          br_radii[bin] = new Float32Array(radiiarr);
        }

        nrots = 0;
        nexpandrefls = 0;
        for (var rotmxidx=0; rotmxidx < rotationstrs.length; rotmxidx++ )
        {
          if (rotationstrs[rotmxidx].length < 1 )
            continue;
          nrots++;

          br_positions[bin].push( [] );
          br_shapebufs[bin].push( [] );
          br_ttips[bin].push( [] );
          Object.assign(br_ttips[bin][rotmxidx], ttips[bin]); // deep copy the ttips[bin] object
          br_ttips[bin][rotmxidx][0] = rotmxidx;
          br_positions[bin][rotmxidx] = new Float32Array( csize );
          nexpandrefls += csize;

          for (var i=0; i<nsize; i++)
          {
            idx= i*3;
            r.x = positions[bin][idx];
            r.y = positions[bin][idx+1];
            r.z = positions[bin][idx+2];

            r.applyMatrix3(Rotmats[rotmxidx])

            br_positions[bin][rotmxidx][idx] = r.x;
            br_positions[bin][rotmxidx][idx + 1] = r.y;
            br_positions[bin][rotmxidx][idx + 2] = r.z;

            if (anoexp)
            {
              r.negate(); // inversion for anomalous pair
              br_positions[bin][rotmxidx][nsize3 + idx] = r.x;
              br_positions[bin][rotmxidx][nsize3 + idx + 1] = r.y;
              br_positions[bin][rotmxidx][nsize3 + idx + 2] = r.z;
            }
          }

          br_shapebufs[bin][rotmxidx] = new NGL.SphereBuffer({
              position: br_positions[bin][rotmxidx],
              color: br_colours[bin],
              radius: br_radii[bin],
              // rotmxidx works as the id of the rotation of applied symmetry operator when creating tooltip for an hkl
              picking: br_ttips[bin][rotmxidx],
              } %s  );
          shape.addBuffer(br_shapebufs[bin][rotmxidx]);
          //WebsockSendMsg( 'Memory usage: ' + String(window.performance.memory.totalJSHeapSize) +
          //        ', ' + String(window.performance.memory.totalJSHeapSize) );
        }
        if (nexpandrefls == nsize*3)
          expstate = "";
        if (nexpandrefls == nsize*6)
          expstate = "isFriedelExpanded";
        if (nexpandrefls == nsize*3*nrots && nrots > 1)
          expstate = "isP1Expanded";
        if (nexpandrefls == nsize*6*nrots && nrots > 1)
          expstate = "isP1FriedelExpanded";
      }
      MakeHKL_Axis(shape);

      shapeComp = stage.addComponentFromObject(shape);
      repr = shapeComp.addRepresentation('buffer');

      for (var bin=0; bin<nbins; bin++)
      {
        for (var rotmxidx=0; rotmxidx < nrots; rotmxidx++ )
        {
          br_shapebufs[bin][rotmxidx].setParameters({opacity: alphas[bin]});
        }
      }

      //stage.viewer.requestRender();
      RenderRequest();
      WebsockSendMsg( 'Done ' + msgtype );
    }

    if (msgtype === "DisableMouseRotation")
    {
      WebsockSendMsg( 'Fix mouse rotation' + pagename );
      stage.mouseControls.remove("drag-left");
      stage.mouseControls.remove("scroll-ctrl");
      stage.mouseControls.remove("scroll-shift");
    }

    if (msgtype === "EnableMouseRotation")
    {
      WebsockSendMsg( 'Can mouse rotate ' + pagename );
      stage.mouseControls.add("drag-left", NGL.MouseActions.rotateDrag);
      stage.mouseControls.add("scroll-ctrl", NGL.MouseActions.scrollCtrl);
      stage.mouseControls.add("scroll-shift", NGL.MouseActions.scrollShift);
    }

    if (msgtype === "RotateStage")
    {
      WebsockSendMsg( 'Rotating stage ' + pagename );

      var sm = new Float32Array(9);
      var m4 = new NGL.Matrix4();

      for (j=0; j<9; j++)
        sm[j] = parseFloat(val[j]);

      // GL matrices are the transpose of conventional rotation matrices
      m4.set( sm[0], sm[3], sm[6], 0.0,
              sm[1], sm[4], sm[7], 0.0,
              sm[2], sm[5], sm[8], 0.0,
              0.0,   0.0,   0.0,   1.0
      );
      stage.viewerControls.orient(m4);
      if (val[9]=="verbose")
        postrotmxflag = true;
      ReturnClipPlaneDistances();
      RenderRequest();
      sleep(100).then(()=> {
          msg = getOrientMsg();
          WebsockSendMsg('CurrentViewOrientation:\\n' + msg );
        }
      );
    }

    if (msgtype === "SpinAnimate")
    {
      WebsockSendMsg( 'SpinAnimating ' + pagename );
      //strs = datval[1].split("\\n");
      var r = new Float32Array(3);
      //var elmstrs = strs[0].split(",");
      for (j=0; j<3; j++)
        r[j] = parseFloat(val[j]);
      if (r[0] == 0.0 && r[1] == 0.0 && r[2] == 0.0)
      {
        // default bindings as per ngl\src\controls\mouse-actions.ts
        stage.mouseControls.add("drag-ctrl-left", NGL.MouseActions.panDrag);
        stage.mouseControls.add("drag-ctrl-right", NGL.MouseActions.focusScroll);
        stage.mouseControls.add("drag-shift-left", NGL.MouseActions.zoomDrag);
        stage.mouseControls.add("drag-shift-right", NGL.MouseActions.zoomDrag);
        stage.mouseControls.add("drag-middle", NGL.MouseActions.zoomDrag);
        stage.mouseControls.add("drag-right", NGL.MouseActions.panDrag);
        stage.mouseControls.add("drag-left", NGL.MouseActions.rotateDrag);
        stage.mouseControls.add("scroll-ctrl", NGL.MouseActions.scrollCtrl);
        stage.mouseControls.add("scroll-shift", NGL.MouseActions.scrollShift);
        stage.setSpin(false);
      }
      else
      {
        stage.spinAnimation.axis.set(r[0], r[1], r[2]);

        stage.mouseControls.remove("drag-ctrl-left");
        stage.mouseControls.remove("drag-ctrl-right");
        stage.mouseControls.remove("drag-shift-left");
        stage.mouseControls.remove("drag-shift-right");
        stage.mouseControls.remove("drag-middle");
        stage.mouseControls.remove("drag-right");
        stage.mouseControls.remove("drag-left");
        stage.mouseControls.remove("scroll-ctrl");
        stage.mouseControls.remove("scroll-shift");
        stage.setSpin(true);
      }
    }

    if (msgtype === "TranslateHKLpoints")
    {
      WebsockSendMsg( 'Translating HKLs ' + pagename );
      strs = datval[1].split("\\n");
      var sm = new Float32Array(3);
      var elmstrs = strs[0].split(",");
      for (j=0; j<3; j++)
        sm[j] = parseFloat(elmstrs[j]);
      shapeComp.setPosition([ sm[0], sm[1], sm[2] ]);
      //stage.viewer.requestRender();
      RenderRequest();
      sleep(100).then(()=> {
          msg = getOrientMsg();
          WebsockSendMsg('CurrentViewOrientation:\\n' + msg );
        }
      );
    }

    function DeleteVectors(reprname)
    {
      thisrepr = stage.getRepresentationsByName(reprname);
      var wasremoved = false;
      for (i=0; i<stage.compList.length; i++)
        if (stage.compList[i].reprList[0].name == reprname)
        {
          thiscomp = stage.compList[i];
          thiscomp.removeRepresentation(thisrepr);
          stage.removeComponent(thiscomp);
          wasremoved = true;
        }
      return wasremoved;
    };

    if (msgtype === "AddVector")
    {
      var r1 = new Float32Array(3);
      var r2 = new Float32Array(3);
      var rgb = new Float32Array(3);
      for (j=0; j<3; j++)
      {
        r1[j] = parseFloat(val[j]);
        r2[j] = parseFloat(val[j+3]);
        rgb[j]= parseFloat(val[j+6]);
      }
      radius = parseFloat(val[11]);

      if (vectorshape == null)
        vectorshape = new NGL.Shape('vectorshape');

      vectorshape.addArrow( r1, r2 , [rgb[0], rgb[1], rgb[2]], radius);
      if (val[6] !== "") {
        var txtR = [ (r1[0] + r2[0])/2.0, (r1[1] + r2[1])/2.0, (r1[2] + r2[2])/2.0 ];
        vectorshape.addText( txtR, [rgb[0], rgb[1], rgb[2]], fontsize, val[9] );
      }
      // if reprname is supplied with a vector then make a representation named reprname
      // of this and all pending vectors stored in vectorshape and render them.
      // Otherwise just accummulate the new vector
      var reprname = val[10].trim();
      if (reprname != "")
      {
        DeleteVectors(reprname); // delete any existing vectors with the same name
        vectorshapeComps.push( stage.addComponentFromObject(vectorshape) );
        vectorreprs.push(
          vectorshapeComps[vectorshapeComps.length-1].addRepresentation('vecbuf',
                                                                      { name: reprname} )
        );
        vectorshape = null;
        //stage.viewer.requestRender();
        RenderRequest();
      }
    }

    if (msgtype === "RemoveVectors")
    {
      var reprname = val[0].trim(); // elmstrs[0].trim();
      // if reprname is supplied only remove vectors with that name
      var reprnamegone = false;
      var clipvecgone = false;
      var unitcellgone = false;
      var reciprocunitcellgone = false;
      if (reprname != "")
        reprnamegone = DeleteVectors(reprname);
      else // otherwise remove all vectors
      {
        clipvecgone = DeleteVectors("clip_vector");
        unitcellgone = DeleteVectors("unitcell");
        reciprocunitcellgone = DeleteVectors("reciprocal_unitcell");
      }
      if (reprnamegone || clipvecgone || unitcellgone || reciprocunitcellgone)
        //stage.viewer.requestRender();
        RenderRequest();
    }

    if (msgtype === "SetMouseSpeed")
    {
      stage.trackballControls.rotateSpeed = parseFloat(val[0]);
    }

    if (msgtype === "GetMouseSpeed")
    {
      msg = String( [stage.trackballControls.rotateSpeed] )
      WebsockSendMsg('ReturnMouseSpeed:\\n' + msg );
    }

    if (msgtype === "SetClipPlaneDistances")
    {
      var near = parseFloat(val[0]);
      var far = parseFloat(val[1]);
      origcameraZpos = parseFloat(val[2]);
      stage.viewer.parameters.clipMode =  'camera';
      // clipScale = 'absolute' means clip planes are using scene dimensions
      stage.viewer.parameters.clipScale = 'absolute';
      clipFixToCamPosZ = true;

      if (near >= far )
      { // default to no clipping if near >= far
        stage.viewer.parameters.clipMode = 'scene';
      // clipScale = 'relative' means clip planes are in percentage
        stage.viewer.parameters.clipScale = 'relative';
        clipFixToCamPosZ = false;
        near = 0;
        far = 100;
      }
      else
        stage.viewer.camera.position.z = origcameraZpos;
      stage.viewer.parameters.clipNear = near;
      stage.viewer.parameters.clipFar = far;
      origclipnear = near;
      origclipfar = far;
      //stage.viewer.requestRender();
      RenderRequest();
    }

    if (msgtype === "GetClipPlaneDistances")
      ReturnClipPlaneDistances();

    if (msgtype === "GetBoundingBox")
    {
      msg = String( [stage.viewer.boundingBoxSize.x,
                     stage.viewer.boundingBoxSize.y,
                     stage.viewer.boundingBoxSize.z]
                  )
      WebsockSendMsg('ReturnBoundingBox:\\n' + msg );
    }

    if (msgtype ==="JavaScriptCleanUp")
    {
      RemoveStageObjects();
      stage.mouseObserver.dispose();
      stage.dispose();
      stage = null;
      WebsockSendMsg('JavaScriptCleanUpDone:\\nDestroying JavaScript objects');
      socket_intentionally_closed = true;
      mysocket.close(4241, 'Cleanup done');
      document = null;
    }

    if (msgtype ==="RemoveStageObjects")
    {
      RemoveStageObjects();
    }

    if (msgtype === "AddSpheresBin2ShapeBuffer")
    {
      strarrs = datval[1].split("\\n\\n");
      coordarray = eval(strarrs[0]);
      colourarray = eval(strarrs[1]);
      radiiarray = eval(strarrs[2]);
      ttipids = eval(strarrs[3]);
      AddSpheresBin2ShapeBuffer(coordarray, colourarray, radiiarray, ttipids);
    }

    if (msgtype === "MakeColourChart")
    {
      msg = datval[1].split("\\n\\n");
      ctop = eval(msg[0]);
      cleft = eval(msg[1]);
      label = msg[2];
      fomlabel = msg[3];
      colourgradvalarray = eval(msg[4]);
      ColourChart(ctop, cleft, label, fomlabel, colourgradvalarray);
      RenderRequest();
    }

    if (msgtype ==="RenderStageObjects")
    {
      MakeHKL_Axis(shape);
      shapeComp = stage.addComponentFromObject(shape);
      repr = shapeComp.addRepresentation('buffer');
      RenderRequest();
      WebsockSendMsg('Drawing new reflections');
    }

    if (msgtype === "InjectNewReflections")
    {
      WebsockSendMsg( 'Rendering new reflections ' + pagename );
      var nrefl = parseInt(val.length/7);
      if (nrefl !== val.length/7)
      {
        alert("Mismatch in array of reflections, colours and radii!")
        return;
      }

      // delete the shapebufs[] that holds the positions[] arrays
      shapeComp.removeRepresentation(repr);
      // remove shapecomp from stage first
      stage.removeComponent(shapeComp);

      positions = [];
      colours = [];
      radii = [];
      alphas = [];
      shapebufs = [];
      ttips = [];
      shapebufs = [];
      nbins = 1; // currently no binning when injecting reflections

      positions_ = []; // dummy variables for conforming to binning scheme above
      colours_ = [];   // as used when expanding reflections
      radii_ = [];
      ttips_ = [-1]

      for (j=0; j<nrefl; j++)
      {
        positions_.push( parseFloat(val[7*j]) );
        positions_.push( parseFloat(val[7*j+1]) );
        positions_.push( parseFloat(val[7*j+2]) );
        colours_.push( parseFloat(val[7*j+3]) );
        colours_.push( parseFloat(val[7*j+4]) );
        colours_.push( parseFloat(val[7*j+5]) );
        radii_.push( parseFloat(val[7*j+6]) );
        ttips_.push(j)
      }

      positions.push( new Float32Array( positions_ ));
      colours.push( new Float32Array( colours_ ));
      radii.push( new Float32Array( radii_ ));
      ttips.push(ttips_);

      shapebufs.push( new NGL.SphereBuffer({
        position: positions[0],
        color: colours[0],
        radius: radii[0],
        picking: ttips[0],
        })
      );
      shape.addBuffer(shapebufs[0]);
      alphas.push(1.0);

      MakeHKL_Axis(shape);
      shapeComp = stage.addComponentFromObject(shape);
      repr = shapeComp.addRepresentation('buffer');
      RenderRequest();
      WebsockSendMsg('Injected new reflections');
    }

    if (msgtype === "SetAutoView")
    {
      if (shapeComp != null) // workaround for QTWebEngine bug sometimes failing to render scene
        shapeComp.autoView();
      WebsockSendMsg('AutoViewSet ' + pagename);
    }

    if (msgtype === "MakeImage")
    {
      filename = val[0];
      stage.viewer.makeImage( {
                factor: 1,
                antialias: true,
                trim: false,
                transparent: false
            } ).then( function( blob ){
    """ + imgPy2orPy3savestr() + """
              WebsockSendMsg('ImageWritten ' + pagename);
        } );
    }

    if (msgtype === "Testing")
    {
      // test something new
      /*
      var newradii = radii[0].map(function(element) {
        return element*1.5;
      });
      shapebufs[0].setAttributes({
          radius: newradii
      })
      repr = shapeComp.addRepresentation('buffer');
      //stage.viewer.requestRender();
      RenderRequest();
      */
    }
    WebsockSendMsg('Received message: ' + msgtype );
    if (isdebug)
      debugmessage.innerText = dbgmsg;
  }

  catch(err)
  {
    WebsockSendMsg('JavaScriptError: ' + err.stack );
  }

};

    """
