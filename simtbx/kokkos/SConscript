import os
import subprocess

import libtbx.load_env

Import("env", "env_etc")

# libkokkos.a
# call kokkos build system directly
# set environment variable defaults if necessary
if os.getenv('KOKKOS_DEVICES') is None:
  os.environ['KOKKOS_DEVICES'] = "Cuda"
if os.getenv('KOKKOS_PATH') is None:
  os.environ['KOKKOS_PATH'] = libtbx.env.under_dist('simtbx', '../../kokkos')
if os.getenv('KOKKOS_ARCH') is None:
  os.environ['KOKKOS_ARCH'] = "Volta70"
if os.getenv('KOKKOS_CUDA_OPTIONS') is None:
  os.environ['KOKKOS_CUDA_OPTIONS'] = "enable_lambda,force_uvm"
os.environ['LDFLAGS'] = '-Llib -L$(CUDA_HOME)/lib64'
os.environ['LDLIBS'] = '-lkokkos -ldl -lcudart -lcuda'
if os.getenv('CXX') is not None:
  os.environ['ORIGINAL_SIMTBX_CXX'] = os.environ['CXX']
os.environ['CXX'] = os.path.join(os.environ['KOKKOS_PATH'], 'bin', 'nvcc_wrapper')
try:
  print('='*79)
  print('Building Kokkos')
  print('-'*79)
  returncode = subprocess.call(['make', '-f', 'Makefile.kokkos', 'libkokkos.a'],
                               cwd=os.environ['KOKKOS_PATH'])
  print('='*79)
except Exception:
  print('Error: libkokkos.a did not build correctly')
  EXIT(returncode)

# libsimtbx_kokkos.so

# simtbx_kokkos_ext.so

# reset CXX
if os.getenv('ORIGINAL_SIMTBX_CXX') is not None:
  os.environ['CXX'] = os.environ['ORIGINAL_SIMTBX_CXX']

# cmd = "cd ../../../modules/cctbx_project/simtbx/kokkos/;"
# cmd += "make"
# #cmd += " KOKKOS_PATH=../../../kokkos/"
# #cmd += " KOKKOS_DEVICES=Cuda"
# cmd += " VERBOSE=1"

# print("********** ALL HIER ************")
# print(os.system('pwd'))
# retval = os.system(cmd)
# print(retval)
# print("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")


#Import("env", "env_etc")

#simtbx_kokkos_env = env.Clone()
#simtbx_kokkos_obj = simtbx_kokkos_env.SharedObject(
#  target="#simtbx/kokkos/kokkos_ext.o",
#  source=["kokkos_ext.cpp",]
#)

#import libtbx.load_env

#Import("env_boost_python_ext")
#env_bpl = env_boost_python_ext.Clone()

#env_bpl.Prepend()
