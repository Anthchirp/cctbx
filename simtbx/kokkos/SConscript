import os
import subprocess
from shutil import copy

import libtbx.load_env

# libkokkos.a
# call kokkos build system directly
# set environment variable defaults if necessary
if os.getenv('KOKKOS_DEVICES') is None:
  os.environ['KOKKOS_DEVICES'] = "Cuda"
if os.getenv('KOKKOS_PATH') is None:
  os.environ['KOKKOS_PATH'] = libtbx.env.under_dist('simtbx', '../../kokkos')
if os.getenv('KOKKOS_ARCH') is None:
  os.environ['KOKKOS_ARCH'] = "Volta70"
if os.getenv('KOKKOS_CUDA_OPTIONS') is None:
  os.environ['KOKKOS_CUDA_OPTIONS'] = "enable_lambda,force_uvm"
os.environ['LDFLAGS'] = '-Llib -L$(CUDA_HOME)/lib64'
os.environ['LDLIBS'] = '-lkokkos -ldl -lcudart -lcuda'
if os.getenv('CXX') is not None:
  os.environ['ORIGINAL_SIMTBX_CXX'] = os.environ['CXX']
os.environ['CXX'] = os.path.join(os.environ['KOKKOS_PATH'], 'bin', 'nvcc_wrapper')
kokkos_cxxflags = None

kokkos_lib = 'libkokkos.a'
print('='*79)
print('Building Kokkos')
print('-'*79)
returncode = subprocess.call(['make', '-f', 'Makefile.kokkos', kokkos_lib],
                              cwd=os.environ['KOKKOS_PATH'])
print()

print('Copying Kokkos library')
print('-'*79)
src = os.path.join(os.environ['KOKKOS_PATH'], kokkos_lib)
dst = os.path.join(libtbx.env.under_build('lib'), kokkos_lib)
copy(src, dst)
if os.path.isfile(dst):
  print('Copied')
  print('  source:     ', src)
  print('  destination:', dst)
else:
  print('Error: {kokkos_lib} failed to copy'.format(kokkos_lib=kokkos_lib))
print()

print('Getting environment variables')
print('-'*79)
kokkos_cxxflags = subprocess.check_output(
  ['make', '-f', 'Makefile.kokkos', 'print-cxx-flags'],
  cwd=os.environ['KOKKOS_PATH'])
kokkos_cxxflags = kokkos_cxxflags.split(b'\n')
kokkos_cxxflags = [f.decode('utf8').encode('ascii', 'ignore').decode('ascii') for f in kokkos_cxxflags[1].split()]
print('KOKKOS_CXXFLAGS:', kokkos_cxxflags)
print('='*79)

# libsimtbx_kokkos.so
Import("env", "env_etc")

kokkos_env = env.Clone()
kokkos_env.Replace(CXX=os.environ['CXX'])
kokkos_env.Prepend(CXXFLAGS=kokkos_cxxflags)
kokkos_env.Prepend(CPPFLAGS=['-DCUDAREAL=double'] + kokkos_cxxflags)
kokkos_env.Append(LIBS=['kokkos'])
simtbx_kokkos_lib = kokkos_env.SharedLibrary(
  target="#lib/libsimtbx_kokkos.so",
  source=[
    'detector.cpp',
    'kokkos_instance.cpp',
    'kokkos_utils.cpp',
    'simulation.cpp',
    'structure_factors.cpp'
  ]
)

# simtbx_kokkos_ext.so

# reset CXX
if os.getenv('ORIGINAL_SIMTBX_CXX') is not None:
  os.environ['CXX'] = os.environ['ORIGINAL_SIMTBX_CXX']

# cmd = "cd ../../../modules/cctbx_project/simtbx/kokkos/;"
# cmd += "make"
# #cmd += " KOKKOS_PATH=../../../kokkos/"
# #cmd += " KOKKOS_DEVICES=Cuda"
# cmd += " VERBOSE=1"

# print("********** ALL HIER ************")
# print(os.system('pwd'))
# retval = os.system(cmd)
# print(retval)
# print("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")


#Import("env", "env_etc")

#simtbx_kokkos_env = env.Clone()
#simtbx_kokkos_obj = simtbx_kokkos_env.SharedObject(
#  target="#simtbx/kokkos/kokkos_ext.o",
#  source=["kokkos_ext.cpp",]
#)

#import libtbx.load_env

#Import("env_boost_python_ext")
#env_bpl = env_boost_python_ext.Clone()

#env_bpl.Prepend()
