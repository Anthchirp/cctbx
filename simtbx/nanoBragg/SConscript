import os


#===============================================================================#
#                                                                               #
# nanoeBragg SCons configurations -- sets up the build environment for          #
# based on the following envorinment variables:                                 #
#     1. IFF CUDA is available: add CUDA-specific sources                       #
#     2. If CCTBX_INCLUDE_TIMEMORY = True | On | 1: add Timemory support        #
#        NOTE: SCons will look in TIMEMORY_ROOT for the Timemory sources/libs   #
#                                                                               #
#===============================================================================#




#________________________________________________________________________________
# SCons Imports
#

Import("env", "env_etc")



#________________________________________________________________________________
# Set up basline nanoBragg_env:
#  1. Configure flags
#  2. Add basline sources (CUDA sources -- iff CUDA is enables -- added later)
#


# remove -ffast-math compile option
nanoBragg_env = env.Clone()
ccflags = nanoBragg_env['SHCCFLAGS']
o = '-ffast-math'
if o in ccflags:
  ccflags.remove(o)
nanoBragg_env.Replace(SHCCFLAGS=ccflags)

# conditional flags for CUDA
if (env_etc.enable_cuda):
  nanoBragg_env.Prepend(CPPDEFINES=["NANOBRAGG_HAVE_CUDA"])

# add basline sources
nanoBragg_obj = nanoBragg_env.SharedObject(
  source=[
    "nanoBragg_ext.cpp",
    "nanoBragg.cpp",
    "nanoBragg_nks.cpp",
  ])



#________________________________________________________________________________
# Add Timeory support -- iff set up to use Timemory
#

class TimemoryNotDefined(Exception):
    pass


BUILD_TIMEMORY = False
TIMEMORY_ROOT  = ""
if "CCTBX_INCLUDE_TIMEMORY" in os.environ:
    if os.environ["CCTBX_INCLUDE_TIMEMORY"].lower() in ("true", "1", "on"):
        BUILD_TIMEMORY = True
        TIMEMORY_ROOT  = os.environ["TIMEMORY_ROOT"]


if BUILD_TIMEMORY:
    print("Building with Timemory support")
    if not os.path.exists(TIMEMORY_ROOT):
        raise TimemoryNotDefined
else:
    print("Building without Timemory suport")


env.build_timemory = BUILD_TIMEMORY
env.timemory_root  = TIMEMORY_ROOT


if env.build_timemory:
    nanoBragg_env.Prepend(LIBS=["timemory"],
                          LIBPATH=[os.path.join(env.timemory_root, "lib64")],
                          CPPPATH=[os.path.join(env.timemory_root, "include")],
                          CPPDEFINES=["HAVE_TIMEMORY"])
    env.Prepend(LIBS=["timemory"],
                LIBPATH=[os.path.join(env.timemory_root, "lib64")],
                CPPDEFINES=["HAVE_TIMEMORY"])




# compile nanoBraggCUDA.cu if possible
if (env_etc.enable_cuda):
  import os
  import libtbx.load_env

  # simtbx location
  env_etc.simtbx_dist = libtbx.env.dist_path("simtbx")
  env_etc.simtbx_include = os.path.dirname(env_etc.simtbx_dist)
  Import("env_boost_python_ext")
  env_bpl = env_boost_python_ext.Clone()

  # add NVIDIA Tools Extension NVTX
  env_bpl.Prepend(NVCCFLAGS=["-lnvToolsExt"])

  # For now do all calculations in double precision to agree with CPU tests
  env_bpl.Prepend(NVCCFLAGS=["-DCUDAREAL=double"])

  # Flag header to declare the cuda wrapper
  env_bpl.Prepend(NVCCFLAGS=["-DNANOBRAGG_HAVE_CUDA"])

  # Guard against possibility that *.cu code is not there
  if "nanoBraggCUDA.cu" in os.listdir(os.path.join(env_etc.simtbx_dist,"nanoBragg")):
    env_bpl.Prepend(NVCCFLAGS=["-DHAVE_NANOBRAGG_SPOTS_CUDA"])
    cuda_src = [
        "nanoBraggCUDA.cu",
        "nanoBragg_nvtx.cu"
    ]
  else:  cuda_src = []

  env_etc.include_registry.append(
    env=env_bpl,
    paths=[env_etc.simtbx_include, env_etc.dxtbx_include]
  )
  env_bpl.Prepend(CPPPATH=[env_etc.boost_adaptbx_include,
    env_etc.boost_include])
  cuda_lib = env_bpl.cudaSharedLibrary(
    target = "#lib/libsimtbx_nanoBraggCUDA",
    source = cuda_src + ["nanoBragg_cuda.cpp"])
  env.Prepend(LIBS=["simtbx_nanoBraggCUDA"])

  # Add NVTX to build env -- needed to link the .so file
  lib_path = os.environ["LD_LIBRARY_PATH"].split(":")
  env.Prepend(LIBS=["nvToolsExt"],
              LIBPATH=[pth for pth in lib_path if "cuda" in pth])


env.Prepend(LIBS=["omptbx"])
env.SharedLibrary(
  target="#lib/simtbx_nanoBragg_ext",
  source=[
    nanoBragg_obj
  ]
)
