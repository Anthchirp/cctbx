# Script for building CCTBX

jobs:
- job: syntax
  pool:
    vmImage: ubuntu-latest
  timeoutInMinutes: 120
  strategy:
    maxParallel: 10
    matrix:
      python2.7:
        PYTHON_VERSION: 2.7
      python3.7:
        PYTHON_VERSION: 3.7
      python3.8:
        PYTHON_VERSION: 3.8
      python3.9:
        PYTHON_VERSION: 3.9
      python3.10:
        PYTHON_VERSION: 3.10
      python3.11:
        PYTHON_VERSION: 3.11
      python3.12:
        PYTHON_VERSION: 3.12
      python3.13:
        PYTHON_VERSION: 3.13

  steps:

  - checkout: self
    path: ./modules/cctbx_project

  - script: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - script: |
      conda create -y -c conda-forge -n py$(PYTHON_VERSION) python=$(PYTHON_VERSION) six future scons
    displayName: Create conda environment
    condition: ne(variables['PYTHON_VERSION'], '3.13')

  - script: |
      conda create -y -c conda-forge -c conda-forge/label/python_rc -n py$(PYTHON_VERSION) python=$(PYTHON_VERSION) six future setuptools
      conda activate py$(PYTHON_VERSION)
      cd $(Pipeline.Workspace)/modules
      git clone -b 4.8.1 https://github.com/SCons/scons.git
    displayName: Create conda environment
    condition: eq(variables['PYTHON_VERSION'], '3.13')

  - script: |
      set -xe
      cd $(Pipeline.Workspace)/modules/cctbx_project
      for f in `cat .azure-pipelines/py2_syntax_exceptions.txt`; do
        echo Removing $f
        rm $f; done
    displayName: Remove Python 3 only files for Python 2 syntax check
    condition: or(eq(variables['PYTHON_VERSION'], '2.7'), eq(variables['PYTHON_VERSION'], '3.7'))

  - script: |
      source activate py$(PYTHON_VERSION)
      cd $(Pipeline.Workspace)
      mkdir build
      cd build
      python ../modules/cctbx_project/libtbx/configure.py libtbx
      make
    displayName: Configure libtbx

  - script: |
      source activate py$(PYTHON_VERSION)
      source $(Pipeline.Workspace)/build/setpaths.sh
      libtbx.py_compile_all -v .
    displayName: Check syntax

  - script: |
      source activate py$(PYTHON_VERSION)
      source $(Pipeline.Workspace)/build/setpaths.sh
      libtbx.find_clutter --verbose
    displayName: Check for clutter
